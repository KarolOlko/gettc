#! /usr/bin/env ruby

require "gettc"
include Gettc

require "rubygems"
require "fileutils"
require "yaml"

def init
  $config_d = ENV.fetch("GETTC_HOME", File.expand_path("~/.gettc"))
  gem_d = Gem.loaded_specs["gettc"]
  $root_d = gem_d ? gem_d.full_gem_path || File.join(File.dirname(__FILE__), "../")
end

def replace_config
  FileUtils.mkdir($config_d)
  FileUtils.cp_r(File.join($root_d, "dist/."), $config_d)
end

def load_config
  replace_config unless Dir.exists?($config_d)
  config = YAML.load_file(File.join($config_d, "config.yml"))

  version = config["version"] || Gem::Version.new(version)
  if version.nil? || version < Gem::Version.new(VERSION)
    FileUtils.rm_rf($config_d)
    replace_config
  end

  Account.new(config["username"], config["password"])
end

def gett(id)
  puts "You have given ID = #{id}"
  account = load_config
  robot = Downloader.new(account)
  parser = Parser.new(robot)
  generator = Generator.new($config_d, Dir.getwd)

  print "Downloading problem to raw HTML ... "
  html = robot.download_problem(id)
  puts "Done"

  print "Parsing problem from raw HTML ... "
  prob = parser.parse(html)
  puts "Done"

  print "Generating problem directory for #{prob.name} ... "
  generator.generate(prob)
  puts "Done"
rescue TemplateError => err
  puts err
end

def main
  prog = File.basename(__FILE__)
  usage = <<-eos.strip
gettc <id>: Generate a solution for the TopCoder problem with that ID, eg 11138.
gettc version: Print version string.
gettc reset: Bring all settings to default state.
  eos

  if ARGV.empty?
    puts usage
    return
  end

  command = ARGV[0]
  case command
  when "version"
    puts VERSION
  when "reset"
    FileUtils.rm_rf($config_d)
    replace_config
  else
    gettc(command.to_i)
  end
rescue StandardError => err
  puts err
  exit -1
end

init
main
