--- !ruby/object:TopCoder::Problem
name: Checker
url: http://community.topcoder.com/tc?module=ProblemDetail&rd=60&pm=358
source: Sun Microsystems / TopCoder Collegiate Challenge Regional Quarterfinal NE/SE
  - Division I, Level Two
statement: ! "PROBLEM STATEMENT\nFor every problem given on TopCoder, there are restrictions
  on the input that\nTopCoder checks.  For the most simple inputs, this could be as
  easy as ensuring\nthat a single int is between 1 and 50, inclusive.  On more complicated\nproblems,
  this CheckData() method (as it is called) becomes more difficult.\n\nImplement a
  class Checker with a method CheckData() that will take a String[]\nas an argument.
  \ You must ensure that the String[] is a valid input for the\nfollowing \"problem
  description\":\n\n****** BEGIN PSUEDO-PROBLEM DESCRIPTION ******\nYou are given
  a String[] lovers representing a love triangle.  Each element in\nthis String[]
  will be formatted as follows:\n\"NAME1 LOVES NAME2\"\n(quotes added for clarity
  only).\n\nChecker will ensure the following:\n*lovers will contain between 2 and
  20 elements, inclusive.\n*Each element of lovers will contain less than or equal
  to 40 characters and\nwill be formatted as\n \"NAME1 LOVES NAME2\" (quotes added
  for clarity again)\nwith the capital word LOVES and only one space between words,
  and no leading\nor trailing spaces.\n*NAME1 and NAME2 will be names of non-zero
  length.\n*NAME1 and NAME2 will not be identical (everyone loves themselves anyway).\n*NAME1
  and NAME2 will contain only capital letters [A-Z] and/or hyphens '-'.\n*For each
  NAME2 there will be a corresponding NAME1 in lovers.  That is,\neveryone loves someone
  else in the problem.\n\nNotes:\n*One person may love multiple people (repeated NAME1
  in different elements) and\none person may be loved by multiple people (repeated
  NAME2 in different\nelements).\n*It is possible for two elements to be identical.\n
  (ex {\"A LOVES B\",\"A LOVES B\",\"B LOVES A\"} is valid).\n****** END PSUEDO-PROBLEM
  STATEMENT ******\n\nDEFINITION\nClass name: Checker\nMethod name: CheckData\nParameters:
  String[]\nReturns: boolean\nThe method signature is:\nboolean CheckData(String[]
  lovers)\nBe sure your method is public.\n\nFor technical reasons, TopCoder will
  ensure the following:\n*lovers contains 0 to 50 elements.\n*each element of lovers
  contains 0 to 50 characters, inclusive.\n*each element of lovers contains characters
  ([a-z][A-Z][0-9]), spaces, or any\nof the characters (quotes added for clarity)
  \"<>./?;:{}[]=+-_|\".\n\nEXAMPLES\n{\"D-G LOVES M\",\n \"M LOVES D-G\",\n \"T LOVES
  G\",\n \"G LOVES D-G\"}\nThis input matches the above criteria, so CheckData returns
  true.\n\n{\"D LOVES M\",\n \"D LOVES C\",\n \"G LOVES M\",\n \"M LOVES T\",\n \"T
  LOVES D\"}\nSince C is loved but never appears as NAME1, this returns false.\n\n{\"D
  LOVES M\",\n \"C LOVES C\",\n \"G LOVES M\",\n \"M LOVES T\",\n \"T LOVES D\"}\nNow
  we see that C desperately tries loving himself, but that is not allowed so\nthe
  method returns false.\n\n{\"N LOVES C\",\n \"C LOVES D\",\n \"D LOVES M\",\n \"M
  LOVES g\",\n \"g LOVES N\"}\ng has lowercase letters in his name and therefore the
  method returns false.\n\n{\"A LOVES B\",\n \"A LOVES C\",\n \"C LOVES A\",\n \"B
  \ LOVES A\"}\nElement 3 has a badly formatted string (two spaces where only one
  is allowed),\nso the result is false.\n\n{\"ME LOVES YOU\"}\nSince 2-20 elements
  (inclusive) are necessary, this returns false.\n\n{\"ME LOVES YOU\",\n \"ME LOVES
  YOU\"}\nThis has the correct number of elements, and the repeat is legal.  However,\nsince
  YOU never exists as NAME1, the result is still false.\n\n{\"ME LOVES YOU\",\n \"ME
  LOVES YOU\",\n \"YOU LOVES ME\"}\nThe above situation remedied.  This returns true.\n\n{\"I
  LOVE YOU\",\n \"YOU LOVE I\"}\nBoth Strings are incorrectly formatted (LOVE instead
  of LOVES), so the method\nreturns false."
definitions:
  Class: Checker
  Method: CheckData
  Parameters: String[]
  Returns: boolean
  Method signature: boolean CheckData(String[] param0)
notes: []
constraints: []
examples: []
systests:
- !ruby/object:TopCoder::Case
  input: ! '["D-G LOVES M", "M LOVES D-G", "T LOVES G", "G LOVES D-G"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["D LOVES M", "D LOVES C", "G LOVES M", "M LOVES T", "T LOVES D"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["D LOVES M", "C LOVES C", "G LOVES M", "M LOVES T", "T LOVES D"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["N LOVES C", "C LOVES D", "D LOVES M", "M LOVES g", "g LOVES N"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "A LOVES C", "C LOVES A", "B  LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["ME LOVES YOU"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["ME LOVES YOU", "ME LOVES YOU"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["ME LOVES YOU", "ME LOVES YOU", "YOU LOVES ME"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES C", "C LOVES D", "D LOVES E", "E LOVES F", "F LOVES
    G"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES C", "C LOVES D", "D LOVES E", "E LOVES F", "F LOVES
    G", "G LOVES B"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES C", "C LOVES D", "D LOVES E", "E LOVES F", "F LOVES
    G", "G LOVE B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES C", "C LOVES D", "D LOVES E", "E LOVES F", "F LOVES
    G", " G LOVES B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", " LOVES "]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "LOVES"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "A LOVES"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "A LOVES "]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B  A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", " LOVES B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES C", "C LOVES D", "D LOVES E", "E LOVES F", "F LOVES
    G", "G LOVES H", "H LOVES I", "I LOVES J", "J LOVES K", "K LOVES L", "L LOVES
    M", "M LOVES N", "N LOVES O", "O LOVES P", "P LOVES Q", "Q LOVES R", "R LOVES
    S", "S LOVES T", "T LOVES A"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES C", "C LOVES D", "D LOVES E", "E LOVES F", "F LOVES
    G", "G LOVES H", "H LOVES I", "I LOVES J", "J LOVES K", "K LOVES L", "L LOVES
    M", "M LOVES N", "N LOVES O", "O LOVES P", "P LOVES Q", "Q LOVES R", "R LOVES
    S", "S LOVES T", "T LOVES A", "A LOVES D"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["CONSTANTINOPLE LOVES SUPERCALIFRAGILISTIC", "SUPERCALIFRAGILISTIC LOVES
    CONSTANTINOPLE"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["CONSTANTINOPLE LOVES CALIFRAGILISTICEXPI", "CALIFRAGILISTICEXPI LOVES
    CONSTANTINOPLE"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["O LOVES K", "K loves O"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A A LOVES B", "B LOVES C", "C LOVES B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B B", "C LOVES A", "A LOVES C"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["CHOGYONIM: LOVES ZOIDAL;", "ZOIDAL; LOVES CHOGYONIM:"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["BIONIC6 LOVES SUPERMAN", "SUPERMAN LOVES 4EYES", "4EYES LOVES BIONIC6"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["C-D LOVES B-D", "B-D LOVES C-D"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["I LOVE YOU", "YOU LOVE I"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '[" A LOVES B", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["J J LOVES M", "M LOVES J J"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B ", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B C", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["AAAAAAAAAAAAAAAAAAAA LOVES AAAAAAAAAAAAAAAAAAAB", "AAAAAAAAAAAAAAAAAAAB
    LOVES AAAAAAAAAAAAAAAAAAAA"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["AAAAAAAAAAAAAAAAAAAA LOVES BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB
    LOVES AAAAAAAAAAAAAAAAAAAA"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["X L", "Y LOVES X"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '[]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A "]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA LOVES B", "B LOVES AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B   ", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB LOVES AAAAA", "AAAAA LOVES BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES B", "A LOVES
    B", "A LOVES B", "A LOVES B", "A LOVES B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A    LOVES B", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "C LOVES B", "B LOVES A"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["AAAAAAAAAAAAAAAAAAAA LOVES BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB
    LOVES AAAAAAAAAAAAAAAAAAAA"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB LOVES A", "A LOVES BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA LOVES B", "B LOVES AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["LOVE LOVES A", "A LOVES LOVE"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '[" LOVES A", "A LOVES B", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A/B LOVES C", "C LOVES A/B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
    LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
    LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '[" LOVES A", "A LOVES "]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES C", "C LOVES D", "D LOVES E", "E LOVES F", "F LOVES
    G", "G LOVES H", "H LOVES I", "I LOVES J", "J LOVES K", "K LOVES L", "L LOVES
    M", "M LOVES N", "N LOVES O", "O LOVES P", "P LOVES Q", "Q LOVES R", "R LOVES
    S", "S LOVES T", "T LOVES U", "U LOVES V", "V LOVES W", "W LOVES X", "X LOVES
    Y", "Y LOVES Z", "Z LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B ", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A", "B LOVES C"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB LOVES AAAAA", "AAAAA LOVES BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "A  LOVES"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A-B LOVES B-A", "A-B LOVES B-A", "B-A LOVES A-B"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
    LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A", "BEN LOVES A"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES
    A", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES
    A", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES A", "B LOVES
    A", "B LOVES A", "B LOVES A", "B LOVES A"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES LOVES", "LOVES LOVES A", "A LVS LOVES"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '[" LOVES BETTA", "BETTA LOVES LOU"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A LOVES B", "B LOVES A", "Q LOVES B"]'
  output: 'true'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["A/B LOVES C", "C LOVES A/B"]'
  output: 'false'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '["LOVES LOVES A", "A LOVES LOVES"]'
  output: 'true'
  reason: ''
images: []
