--- !ruby/object:TopCoder::Problem
name: BackyardTrees
url: http://www.topcoder.com/tc?module=ProblemDetail&rd=10008&pm=6620
source: Single Round Match 328 Round 1 - Division I, Level Three
statement: ! "This problem statement contains images that may not display properly
  if viewed outside of the applet.\n\nYour backyard is a rectangular grid that measures
  *width* x *height* square meters.  You would like to plant *treeCount* trees using
  the following rules: \n\n\t- All trees must be planted at integer coordinates on
  the grid.\n\n\t- All trees must lie on the same straight line.\n\n\t- Each pair
  of trees must be at least *distance* meters away from each other.\n\nFor example,
  two (of many) ways in which four trees could be planted on a 10x10 grid if *distance*
  is 2 are depicted below:\n\n![image](images/BackyardTrees1.png)   ![image](images/BackyardTrees2.png)\n\nReturn
  the number of distinct ways in which the trees could be planted, modulo 1,000,000,000.
  \ Two layouts are considered distinct if there exists a point (x, y) such that one
  layout contains a tree at (x, y) and the other layout does not."
definitions:
  Class: BackyardTrees
  Method: countWays
  Parameters: int, int, int, int
  Returns: int
  Method signature: int countWays(int treeCount, int width, int height, int distance)
notes: []
constraints:
- ! '*treeCount* will be between 1 and 50, inclusive.'
- ! '*width* will be between 1 and 500, inclusive.'
- ! '*height* will be between 1 and 500, inclusive.'
- ! '*distance* will be between 1 and 50, inclusive.'
examples:
- !ruby/object:TopCoder::Case
  input: ! '2,

    4,

    4,

    1'
  output: '300'
  reason: There are only two trees, and the distance between any two points with integer
    coordinates is always at least 1.  Therefore, you can place the two trees at any
    two points with integer coordinates.  There are 25 such points and this gives
    you 300 different ways to plant the trees.
- !ruby/object:TopCoder::Case
  input: ! '13,

    36,

    48,

    5'
  output: '2'
  reason: The diagonal of the backyard has a length of 60, which is just enough to
    place 13 trees with a distance of 5 between each adjacent pair.  Luckily, these
    13 points are at integer coordinates, so you can place the trees along either
    of the two diagonals while satisfying all the rules.
- !ruby/object:TopCoder::Case
  input: ! '5,

    5,

    5,

    1'
  output: '88'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    49,

    49,

    1'
  output: '102'
  reason: You can place the trees along the rows or the columns of the grid, as well
    as on the two diagonals.
- !ruby/object:TopCoder::Case
  input: ! '6,

    5,

    5,

    2'
  output: '0'
  reason: You can't plant 6 trees on the same line with the necessary distance between
    them on this grid.
- !ruby/object:TopCoder::Case
  input: ! '10,

    55,

    75,

    5'
  output: '490260662'
  reason: ''
systests:
- !ruby/object:TopCoder::Case
  input: ! '2,

    4,

    4,

    1'
  output: '300'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '13,

    36,

    48,

    5'
  output: '2'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '5,

    5,

    5,

    1'
  output: '88'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    49,

    49,

    1'
  output: '102'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '6,

    5,

    5,

    2'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '10,

    55,

    75,

    5'
  output: '490260662'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '1,

    7,

    8,

    50'
  output: '72'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '2,

    2,

    36,

    14'
  output: '2484'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '3,

    417,

    232,

    43'
  output: '246502024'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '4,

    39,

    28,

    3'
  output: '2640350'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '5,

    40,

    28,

    10'
  output: '597'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '6,

    40,

    48,

    6'
  output: '7956408'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '7,

    300,

    326,

    5'
  output: '231751905'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '2,

    1,

    1,

    1'
  output: '6'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '8,

    496,

    438,

    39'
  output: '446208395'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '9,

    2,

    36,

    4'
  output: '2145'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '10,

    317,

    82,

    15'
  output: '234329616'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '11,

    39,

    28,

    4'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '12,

    40,

    28,

    4'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '13,

    40,

    48,

    2'
  output: '227955713'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '14,

    250,

    326,

    24'
  output: '457474184'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '15,

    388,

    163,

    15'
  output: '994478308'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '16,

    500,

    48,

    11'
  output: '206739693'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '17,

    494,

    14,

    23'
  output: '611184520'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '18,

    60,

    58,

    2'
  output: '172610472'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '19,

    2,

    58,

    4'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '20,

    222,

    105,

    10'
  output: '585030272'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '21,

    458,

    14,

    21'
  output: '822102050'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '22,

    16,

    42,

    1'
  output: '841191620'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '23,

    228,

    500,

    4'
  output: '805903416'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '24,

    91,

    500,

    7'
  output: '872481282'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '25,

    421,

    312,

    11'
  output: '424493976'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '26,

    289,

    464,

    14'
  output: '175093450'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '27,

    467,

    470,

    15'
  output: '909537996'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '28,

    273,

    23,

    3'
  output: '451361080'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '29,

    427,

    3,

    2'
  output: '959744000'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '30,

    306,

    328,

    3'
  output: '385393404'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '31,

    111,

    252,

    5'
  output: '378222252'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '32,

    193,

    365,

    3'
  output: '943182664'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '33,

    139,

    447,

    6'
  output: '835091520'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '34,

    223,

    207,

    6'
  output: '337796324'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '35,

    225,

    500,

    8'
  output: '490522768'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '36,

    31,

    165,

    3'
  output: '53515776'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '37,

    343,

    403,

    9'
  output: '517677600'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '38,

    478,

    451,

    15'
  output: '483173738'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '39,

    409,

    154,

    2'
  output: '238660604'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '40,

    268,

    477,

    4'
  output: '371559939'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '41,

    268,

    83,

    5'
  output: '644090076'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '42,

    453,

    500,

    4'
  output: '272105444'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '43,

    241,

    461,

    11'
  output: '284114760'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '44,

    450,

    488,

    6'
  output: '325459699'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '45,

    494,

    59,

    9'
  output: '531469792'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '46,

    209,

    500,

    4'
  output: '73027340'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '47,

    390,

    500,

    10'
  output: '844183312'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '48,

    500,

    500,

    13'
  output: '776440460'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '49,

    107,

    5,

    2'
  output: '200751800'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    370,

    455,

    9'
  output: '918208088'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    439,

    500,

    1'
  output: '892203494'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    126,

    494,

    7'
  output: '176144876'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    76,

    181,

    3'
  output: '935538828'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    455,

    447,

    12'
  output: '599741912'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    312,

    37,

    4'
  output: '370205520'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    430,

    154,

    6'
  output: '788385595'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    500,

    240,

    5'
  output: '105571448'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    13,

    499,

    9'
  output: '230426224'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    455,

    143,

    5'
  output: '52964602'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    99,

    84,

    2'
  output: '4479'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    500,

    500,

    12'
  output: '17751284'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    500,

    500,

    13'
  output: '920638408'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    500,

    500,

    14'
  output: '920625772'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    500,

    500,

    15'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    500,

    500,

    16'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '30,

    500,

    500,

    23'
  output: '29891264'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '30,

    500,

    500,

    24'
  output: '29890080'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '30,

    500,

    500,

    25'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '15,

    500,

    500,

    47'
  output: '126734328'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '15,

    500,

    500,

    49'
  output: '14709420'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '15,

    500,

    500,

    50'
  output: '0'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '2,

    2,

    2,

    2'
  output: '16'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '2,

    500,

    500,

    2'
  output: '499624500'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '1,

    5,

    5,

    1'
  output: '36'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '1,

    251,

    497,

    2'
  output: '125496'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '1,

    500,

    500,

    50'
  output: '251001'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '50,

    500,

    500,

    2'
  output: '911709884'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '1,

    2,

    2,

    1'
  output: '9'
  reason: ''
- !ruby/object:TopCoder::Case
  input: ! '30,

    500,

    500,

    27'
  output: '0'
  reason: ''
images:
- !ruby/object:TopCoder::Image
  name: !ruby/object:Pathname
    path: BackyardTrees1.png
  content: !binary |-
    iVBORw0KGgoAAAANSUhEUgAAAPgAAADbCAIAAAG4jPtSAAAACXBIWXMAAFxG
    AABcRgEUlENBAAAACXRFWHRDb21tZW50AACJKo0GAAAUtElEQVR4nO2di1sV
    1frH/S9Oyp19ATYXUZSLXDS8RKkogoogIBdRVBRF84JJ6qnOqU79nlPpMc16
    uh1NS/OOnqwsT2VET2poIJh4Ke+pICACv7X2bEfOzGbPO8w6PhvO9/MsfWbW
    vPPOO1++e+1hs2dNv107d6wpX8XaqrLl0oLA1o/967Rz+9atTtEgO7Iju7Ds
    ixeWVBzYz9q777wtLQhsvVoZZO+L2Qvzc4sKC1irsXhJC/Ky9H+11XvRjGyp
    /7OhYS9NSpaW3x+ZIDUWxjrZJqmfBcuperUyyI7sPchOb4tLFkgLUyZNlBZm
    FeS5uo7UVcuuT3dICwNtgdICe0G6qh3ZkR3ZRWXXdV24bEmptGCz+EsL45PG
    uLqO/O/WjuzIrjf72impR8NtL06awC7+5hTkqa8muy6PfWK0tGz28XR99Sn9
    36uVQXZk15tdvkqVEXi5KlcjI5cl47o+F6D0bkDpzunNpU+bnBoVEd61DQkP
    VfT0uA20BSh6/Dz7K3oC/H16lrw3q47SnYPSnYPSuwGlOweldwNKdw5K74ZH
    XXqNxaul+qTr3c6OimdNMzuldHa4tmtXXec5M8h2YUaGotNZ6SHm+zduuM51
    qXg2a65jOmmln7Z6d7S1uc7TMGXi1ZdfUHT2LcOgdA5Kd06/Scljg63mri3I
    7K/o6XFjv7wpenw9HlP0mLw9epa8N6veu0vXbEUz8xU9aRMnKHoWLSgW9fXD
    8pVlip7c7OmKnrXPlpM+0Zw/t0jRExZkVfRs37a1Z+KpaWpqUvRMGJuk6Ckp
    novSUboESreD0qmgdDsonQq1dMqH8AEmX0WPr+oTfnYyov6gEDkoTNFj9vFU
    9AwOtfVm1Sm5UDoVlG4HpVNB6XZQOpX/gdIp3/+cOO4pRU+Q2U/RU1qyQNRt
    SB+8956iJ2FYlKInNyuzN6tOyYXSqaB0OyidCkq3g9KpoHQ7KJ0KSrfTO0pv
    /OrLGouXolNdujqmZ6XfeHuTOpW6dHUML12+E+Xf4UHSDSisLcvKkPs/ToiJ
    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
- !ruby/object:TopCoder::Image
  name: !ruby/object:Pathname
    path: BackyardTrees2.png
  content: !binary |-
    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
    sKGU3c2fO0czZveuz57ZsX1b/uKFp099p79Jb4itmzfpz/N2waq0NklCSsro
    1nVm3lT9eY4eOSy9/4SUNHXi65KrhKRKTYxfu2a1/jwfbVgvvd2FlCS9P8eN
    HikklcVsOnjggP48695by0aXnZ9up4zqFCSjl104rz+P9OnQPjVZfx6J7Mwe
    lA8RCpQPGgrSh1H/vtlCUqUmxVM+szQ5e/Ys5XONgvTZt2DeG0JSSUanfERq
    InkdRucARqcAo3MAoxOB0SnA6HzA6BRgdA5gdCIwugq1l8oqFs27uWoZjM4H
    jE7BOEavXLu6ODzgQue0M9u3wOgcwOgUmtjotpLiWx+8px6DEZ0PGJ1CUxq9
    +sgh5/OIbixTe+4SjM4HjE5Bv9EdtbWVRQVl6Z3PhgeUpMZfm/Ra9b+OSJ1e
    J4TR+YDRKeg0uvMpq8p2LjbcUVfnXc7HRt/6yeZ331l9XwRWS+SJ49/qz7N9
    6yftkhP155HI7J7+1pK/689TUfFbpClEfx6JBfPfyMnqJSRVSkLrPZ/v1p/n
    0NdfJ8RZ9OeRGNQ/d8a0KV78YfWdO/cqKorNgR6NLrWKTz72rqT9X+ydP3c2
    RnQqGNEp8I7oDputNC1R8nFJcqz9/v2rY4Z7HtFbR9Tf1n7UqEdw6MIHjE7B
    i0MXycG1l8pcPz784fuylzv/YXFrZNXG9Q6Hw+uSYHQ+YHQKHo1+beJY5lpz
    oK3kHD0VroxyAKNT8LXRHXZ7ZVFB7dUrXKlgdA5gdAr6jV595FBp2wRp2F7a
    /WWDXBl1AaPzAaOrc3123s1VyyYMyIXRqcDoRJrS6PX37t5Y8VZJcuzNfyxX
    CTPOXBcXMDofzdXoddfLfykqXBoVdnv7ltpLF1UiJYuXpiVKR9v26urGYmB0
    DmB0IjqNXn3oK49fWl/K7e11TuMafeOG9YsXzD9z5rT+FhMRvmnjR/rzrFi+
    NDk+TkhJXTt1nDLxdf15jh09ag4JFFLS+LGj07t2EZIqIc5S9Hahd3/7/Tee
    Xe5sPy7P9y5tZkb6iKGDhby6iNDggwf268/z/rtrZkybihGdSrMZ0W0Xzktn
    jfba2nPWSM9GjwiSjsi9K8m4IzqMTqR5GN1Wcs45n6R86gR7zcNL/bNlLi/r
    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
    3XtrJaP/P4Q5m6U5A8AMAAAAAElFTkSuQmCC
