--- !ruby/object:TopCoder::Problem 
constraints: 
- "*X* will contain between 1 and 50 elements, inclusive."
- "*X*, *Y* and *R* will each contain the same number of elements."
- Each element of *X* and *Y* will be between -1000 and 1000, inclusive.
- Each element of *R* will be between 1 and 1000, inclusive.
- "*x1*, *y1*, *x2* and *y2* will be between -1000 and 1000, inclusive."
- No two circumferences will have common points.
- The points (*x1*,*y1*) and (*x2*,*y2*) will not lie on any of the circumferences.
definitions: 
  Class: CirclesCountry
  Method: leastBorders
  Parameters: int[], int[], int[], int, int, int, int
  Returns: int
  Method signature: int leastBorders(int[] X, int[] Y, int[] R, int x1, int y1, int x2, int y2)
examples: 
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [2],
    -5,
    1,
    5,
    1
  output: "0"
  reason: "![image](images/case1.gif)"
- !ruby/object:TopCoder::Case 
  input: |-
    [0,-6,6],
    [0,1,2],
    [2,2,2],
    -5,
    1,
    5,
    1
  output: "2"
  reason: "![image](images/case2.gif)"
- !ruby/object:TopCoder::Case 
  input: |-
    [1,-3,2,5,-4,12,12],
    [1,-1,2,5,5,1,1],
    [8,1,2,1,1,1,2],
    -5,
    1,
    12,
    1
  output: "3"
  reason: "![image](images/case3.gif)"
- !ruby/object:TopCoder::Case 
  input: |-
    [-3,2,2,0,-4,12,12,12],
    [-1,2,3,1,5,1,1,1],
    [1,3,1,7,1,1,2,3],
    2,
    3,
    13,
    2
  output: "5"
  reason: "![image](images/case4.gif)"
- !ruby/object:TopCoder::Case 
  input: |-
    [-107,-38,140,148,-198,172,-179,148,176,153,-56,-187],
    [175,-115,23,-2,-49,-151,-52,42,0,68,109,-174],
    [135,42,70,39,89,39,43,150,10,120,16,8],
    102,
    16,
    19,
    -108
  output: "3"
  reason: ""
images: 
- !ruby/object:TopCoder::Image 
  content: !binary |
    R0lGODlh0QHzAPcAAAAAAP///0k7SUNBQ/79/jhGRvv///z///7///v9/ACo
    AACmAAClAACiAACgAACeAACdAACbAACYAACWAACVAACSAAOoAwaqBgqrCgys
    DA2rDQ6tDg2HDRKuEhWuFRavFhiwGBuxGx2xHSCzICa1Jiq2Ki+3LzK5Mja6
    Nji6ODq7Oju8Ozy7PD68PkG9QUK9QkO+Q0S+REfAR0e/R0rFSki/SEnASU7H
    TkzBTEvAS03BTU/CT0/BT1HDUVLDUlPEU1TEVFbEVlrGWl3HXWDHYGHIYWPI
    Y2XJZS9dL2jKaGrLamvMa2zMbG/Mb3TOdHvRe4DSgIPTg4XUhYfVh4nViYzW
    jI7XjpHYkZDXkJLYkpXalZrcmprbmp3cnZ7cnp3bnaDdoKPeo6TepKfgp6jg
    qKngqazhrK/ir7HisbPjs7TjtLXktcLywrfkt7rmur7nvr3mvcDowL/nv8Lp
    wsTqxMbqxsXpxcnrycfpx8vsy8rryszszM7sztHt0dXv1dfw19jv2Nrw2t7y
    3uHz4eX05eTz5Ob05un26er26un16er16u747uz27Oz17O/37/P58/b79vn8
    +f3+/f8AAP4EBP8ICP8MDP4QEP4TE/4UFP4YGP4aGv4eHv4iIv4nJ/4qKv4u
    Lp4eHv4yMv41Nf44OP48PP4/P/5BQf5CQv5FRf5JSf5NTf1NTf5OTv1PT/5R
    Uf1RUf5SUv1SUv1VVf5aWv5eXv5hYf5lZf1kZP5nZ/1mZv5paf1oaP5ra/1r
    a/1ubv1vb/1xcf5zc/10dP52dv15ef19ff2Cgv2Fhf2Jif2Kiv2Njf2QkP6T
    k/2Vlf2Wlv2Xl/2amv2dnf2iov2lpf2qqvysrPyvr/yxsf22tvy6uvy9vf3A
    wPzDw/zExPzHx/zJyfzNzfzPz/zR0fzW1vzZ2fzc3Pze3vve3vzh4fzi4vvi
    4vzl5fzn5/zp6fvq6vzt7fzx8fzz8/329vv29v36+vv5+f79/f7+/vv7+5iY
    mGJiYk1NTUBAQDo6Ov///yH5BAEAAP8ALAAAAADRAfMAAAj/APMFGDgQH8GD
    CBMqXMiwocOHECNKnEixosWLEfth3Mixo8ePIEOKJGgwocCDJUeqXMmypcuO
    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
    ID/yJF/yJn/yKJ/yKr/ynhEQADs=

  name: !ruby/object:Pathname 
    path: case1.gif
- !ruby/object:TopCoder::Image 
  content: !binary |
    R0lGODlhOgLmAPcAAAAAAP////4SE/9fZ//Q3aeZp5eLl5uRm/Hm8ZiSmO3k
    7fXv9ejj6I+Nj//9/+Xj5ePh4+Pi45OSk5KRkk1+9SNgyzt44z565oiTk+X0
    9Pb//+bt7fv///z///7//zzYWUbXXnLiho/hmCzIPbzrvQCmAACjAACgAACf
    AACcAACaAACWAAKoAgJgAgWqBQmqCQurCw2sDQ+tDxK6EhGuERGtERKuEhKt
    EhWvFRawFxm3GRivGBqwGhy5HBigGByxHB2xHR6xHh+yHyGzISO0IyOzIyS0
    JCa0Jim2KSy9LCqzKi22LS+3LyWQJTC4MDK7MjO4Mx5sHja8Nja6Njm7OTq7
    Oju8Oz28PT+9P0G+QUG9QUK9QkO+Q0W/RUbARka/RkjASEnASUzBTE3CTU/G
    T07CTk/CT1LDUlPDU1XEVVfEV1nFWVzGXEeZR17HXl/IX2DIYGLIYmXJZWfK
    Z2rLamvLa23MbW7MbnLOcnHNcW7EbnXPdXfPd33UfXrQen7SfoHTgXvJe4PT
    g4TThIbUhonViYzXjI/Xj5HYkZPZk5balpnbmZzcnJ/dn6LeoqXfpaffp6jg
    qGeIZ6vhq63hraTTpLDisLPks7Pjs7bmtrTktLTjtLbktrnmubzmvKvRq7/n
    v8HowcPpw83zzcbqxsnryczszMvry9b21s/tz9Ht0dTu1Nbv1tjw2Nnw2dzx
    3N7y3uv96+Hz4eP04+Lz4uX05ef15+v26+737u327fD48PT69PP585mdmfb7
    9vT59Pn8+fb59vr8+vz9/FPMQFfNRbTsoouoXZ+YjPTt4rQ0A9dROOynm8oZ
    APV/ef8BAf4NDf4dHf4jI/4rK/43N/5BQf5ISMs7O/5OTv5UVP1cXP1iYvVf
    X/5nZ/1tbf1zc/18fP2Jif2Tk/2enqVtbfyqqv2ysvy4uPy9vf3Bwey1tfzD
    w/zGxv3Ly/zU1Pzc3Pzj4/zs7P309P35+f79/f7+/uvr6+fn5+Hh4dDQ0JeX
    l5GRkYyMjIqKioODg////yH5BAEAAP8ALAAAAAA6AuYAAAj/AC0EGEiwoMGD
    CBMqXMiwocOHECNKnEixosWLGAve45exo8ePIEOKHEmy5ECBJlOqXMmypcuK
    G1/KnEmzpk2PKG/q3MmzZ8mYPoMKHUo0Ys6iSJMqnQl0qdOnUFMejUq1qtWF
    Ta9q3cr1ZNevYJFmDUu2rM+pZtOqTTl2rdu3JdHCnUs3Ytu6ePM+lKu3b967
    fgP75Su4sFrAhhO/Jay4MVfEjiODZSy58lPIljNTpay5s1DMnkMX5Sy6dE3Q
    plPrJK26tUrUrmO3ZC279kfYtnOLpK2790TcvoNb5C28uELgxpM3JK68OfLm
    O4VJDwAFiJDr2LMLCWIkgHRhm6GL/3f4fPzLRIkKMZnCHgoah3GgsJ+yhJCi
    RMOWMjcfvDx/k/UAwUQMVECyCC4YAbPII2C4wEQQCI7234QE+UehR8B0QkgM
    PACTkjBHxOBHJ7oItd+FtVmIokWdhGGFHYW8hMgdVoRhyVkr8qdijhAJk8cL
    YsBSIk27wJIGDHF4uBqP4+3I5EKu+IGCG/n15AYKfqRy04lPmuZklwZZUsMS
    mKwyVCuaTFGDIzVxCWZoX76ZCh47sLKULTzYccpMbr7ZWZxdfnHFIlE5wsUU
    MvXpZ2aA8viHCVdcNYYJd7ik6KKVNYpiK1WwActWt8BRhSksXYppZJpS6IkJ
    hH41iQk3qv9k6qmNpcofMDIgWpYYLuQiFa2+2WoeEpqo1ckRvwKrm7DQzXEC
    L27VY4IacSm7LEfWGlSHCfTMVcIaJM2abWDMJsdGI3hZcsZI4o7bV7nCiYKF
    Ino1ckUnIbXr7l/YWptKCvj2ZUoKnoCk7751wesbCqQIpkoKBiPsmsK5rcIC
    I4ZNwoIoOEncGsW1sbJCKYqJHEpHB3v8FsiyuUBqY6uUgLLKqbHsmhutOjbJ
    exilTPNh/S46R86RPcJGzz+XZnNqfsicGQxzXORz0mUtXdopJnhWQibDUQ1n
    0GAe8YpntQzRtdd/gs1kPS4MGRq3FE2N9ldWe6aIrqJ9AUjcc2v/Vrdmusig
    mhB2SiR331v9nZkLk6imidNGIW6Z4pUVsodrhfBhuOSZqr3iCba45osJEe71
    lCM7aKe6EDm4zblFlEd2RRmyyYFE5EJxEskkZuQwxO88gMfQJDz8PoSIlDxS
    +OvkeU6hKVTYtgXHpvdUhxVgnKAIIVxjhEghhaQABhVsMo+V8xNyQXJtsDAB
    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
    hCRIINSg1sKnDQoIADs=

  name: !ruby/object:Pathname 
    path: case2.gif
- !ruby/object:TopCoder::Image 
  content: !binary |
    R0lGODlhDAKcAfcAAAAAAP////8ABP8NDv9KXf9oef9Vaf/j7mNQY1xPXF1W
    XVZQVldVV/79/lNdXVNXV/v///z///7//0xaVvH89J/qrbTsvLzsw6znswC7
    CQKwCinFMACvAACrAgCrAACoAACnAACkAACjAAChAACeAACdAACaAACZAACW
    AACSAAKoAgSpBAWrBQeqBwepBwirCAqrCg2sDQ+tDxKuEhWvFRe7FxKOEhey
    FxevFxmwGRuwGx67Hh6yHiGzISO0Iya/JhZuFiW0JSe1Jyq2Ki23LS+3LzC4
    MDK4MjW6NTjEODW5NTa5Nje6Nzm6OT/IPzu7Oyh/KDy8PD+8P0C9QEG+QUfL
    R0K9QkO+Q0S+REfAR0e/R0i/SEnASUrASk7GTk3CTU3BTVPOU1HIUU7BTk/C
    T1LDUlTDVFbFVljFWFnGWVrGWlrFWl3HXWDIYF/HX2LJYmfSZ2XJZWjKaGvM
    a2vLa3LYcm3MbW/Nby9WL3HNcXvce3TOdHfQd3jQeHfPd3jPeHvRe37Sfn3R
    fYjgiIHTgYTUhEBnQI7ijobUhonWiYnViYrWiozXjIvWi4/Yj47XjpDYkJPY
    k5XZlZ/ln5jamJvcm5zcnJvbm57cnqDdoKzsrKLeoqPeo6bfprTvtKjfqKrg
    qq3ira3hrbrxuq7hrq/ir7LksrDisLLjsrDhsLXktbflt8X1xbnlubvmu73n
    vcDowL/nv8Howc/4z8LowsXqxT9LP8bqxsXpxcbpxsnqycvsy8vry83szczr
    zM7sztr52tHu0dDt0NPu09Lt0tTv1Nbv1tfv19nw2djv2Nrw2t3y3d3x3ev/
    69/y397x3uDy4OP04+Lz4uT05Of15+r26u337fH58fD48PT69Pb79vn8+fr8
    +vz9/Pn6+Qd9AKQpGv8AAPIAAP8EBP4ICP4VFf4eHv4qKv42Nv5ISP5TU/1c
    XP1oaHg3N/11df2NjP2fn/2qqv2ysv23t/y6ulJAQP3IyPzX1/zl5VFMTPzv
    7/339/79/f7+/lNTU////yH5BAEAAP8ALAAAAAAMApwBAAj/AAMIHEiwoMGD
    CBMqXMiwocOHECNC9CexosWLGDNq3Mixo8ePIEOKHEmypEmFFE+qXMmypcuX
    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

  name: !ruby/object:Pathname 
    path: case3.gif
- !ruby/object:TopCoder::Image 
  content: !binary |
    R0lGODlhOwJwAfcAAAAAAP////4FB/1ZWv2Cg/y3uP8MI/zn6WJPYldMV1xU
    XJqOmpCGkOfd5+Db4I6MjlRTVP/9/1ZVVi1p7AtRzCBl3/v///z///7///L/
    /uD/7+b/8JH6tM373L34zqrwuXnkjfb897TpusXvyqPjqSjCNBGyFR23Ize9
    OwCxAACtAACrAACoAACnAACkAACjAAChAACeAACdAACaAACYAACVAACLAAOr
    BAOpAwaqBgalBgmrCQurCwysDA+tDw2RDRKuEhGeERa5FhWvFRi6GBevFxi0
    GBqwGh6yHiCzICK7IiKzIxmCGSS0JCW0JSi1KCm2KSq2Kiu2KzDDMC63LiaY
    JjK9MjC3MDK4MjS5NDW6NTe6Nze5Nzm6OTu7Ozy8PDqzOj68PkbLRkG9QUO+
    Q0S+REa/RkfBR0jASEvASzyXPE7CTlTPVFHDUVPDU1TEVFfEV1nFWVzGXF/I
    X2bVZl/HX2DHYGLIYmbJZjVnNWnLaWrLamS/ZGzMbHLVcm7MbnDNcHLOcnHN
    cXPOc3bPdnrVenfPd1WSVXrQen7SfoHTgYPTg4TUhIbUhojViInViYrViovW
    i5bllo3XjY/Xj5DXkJLYkpXZlZnbmYvHi5zcnJvbm57cnqDdoKzsrKLeoqnm
    qaXepaffp1NvU6jgqLTutKvgq63hrbDisLPks7Ljsr/zv7TktLXktbbktkte
    S7nlucf1x7zmvHSNdL/nv8DnwMLowsXpxcjqyMvry9v8283szYyhjM/tz8zq
    zNHu0bnSudTu1Nfw19bv1uP849jw2LnNudvx297y3uz/7OP04+Lz4uHy4e//
    7+Hx4eb15uX05UdLR+n16Xh+eOv26+r16u737vH58fH48fT69PP5809RT/b7
    9vj7+Pf69/r8+vz9/Ofo5ymnG6zapCyXDKPnjf//66KeYnddEF5WSZtoJ8Nh
    O9tqUswcAKkVAP8AAP4NDf4XF/4zM/5MTP11df2bm/zHx/ze3vz19fz7+/7+
    /vv7+9nZ2YeHh1NTU////yH5BAEAAP8ALAAAAAA7AnABAAj/ACsEGEiwoMGD
    CBMqXMiwocOHECNKhMiv38SLGDNq3Mixo8ePIEOKHEmyo8CSKFOqDFlxpcuX
    MGPKnEmz5siTNnPq7Nhyp8+fQIMKHZoSJ9GjQHsiXcq0qdOnRaFKfal0qtWr
    WLMeNaq1a8aqXsOKHUs2I9eyaA+CTcu2rVusZ9+WXSu3rt27OuPi7Up3r9+/
    gD/qDTy1L+HDiBMfHKyYqeHGkCPfZSx56OPKmDOLpazZ5+XOoEM75Sy65ufS
    qFPvJK0a5unWsGOrZC075evauHNvpK1b5O3ewIMv5C2cp8XiyJM3JK4c4+/m
    0GUzjx7xOfXrpadjb2h9u3fM2r8n/+wuvnzi8OYLkk/P3i/69uvby6/7nn38
    +fjZ1k9/P7//sfuZ199/BGoVYHkDFqjgVAeK5wADC0ZoV4PIDaNJJxhmiGEo
    mRwCioYgoiLhiF1RKFswb8ih4opwmLHHIDDGCCMhfKhRiIwyGrJGGiuyeAmJ
    QC5lImpSDFFEEUMkQQosTDbpyjALNQChQt+w0qSTcPBwZBE84BLkl6tFp480
    0nSzhQsstPACLAGAo1F84ERgzREttIDDDOCQqQ2YfK40pGK7fPKJKjwgQYUU
    UbB03Ed4PCFFFjWkEsonovRpaUh/EqbPG3q8cMcggAhSUoIIbdIHIInIgEcc
    rlzqqkaZ+v8Fiw9H7MAJLK2qROpCu7RyyhdADHHHq8RCFKtc2XgzyAstRMGN
    TLs69E0+iTCbQwTVFKvtYq1RE4olSEDhhDCmLToTFVAUoQcpt2y77bFoTVKH
    GXXg8WxO0WLkiB5owBGHu8TCK5Y2PvhwhyrtemZuTsqogskOQ1gCsKUCa8WN
    Mle0oEw3QuXLkT7YtBHDLthM/GXFVj1ziiI+IKHKUR5/lMQRa4RSi8kjogwV
    OHcAscUgji08lCiBzNBHrjgXqHNTpCABBCap6NNUzCLBIsoYQ6SRNIFLI0XL
    CzCcIhXVJcHggr1b49e1UNZoIoUTV5GNUiI5OJJL2u2tDdQfZrT/0QtWcqeE
    hxlvkIt3eXrv5EgOiXiZVeApPYOJE1kcLl7iNtUSgxx78iX0VajEoMc3lmOH
    uUz6fBIF3GJB/lIiOEByTOnRnQ4TIV7sAOVYrsMExwt/7E47cravZIoPipyi
    zFyfd3XKJk+gMTzxb00yg9hp9T5TDF1YM31wxZNkDSc7/NuW9jOZggMejn+P
    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
    QAAAOw==

  name: !ruby/object:Pathname 
    path: case4.gif
name: CirclesCountry
notes: []

source: Single Round Match 443 Round 1 - Division I, Level One
statement: |-
  Circles Country is a country that contains several circular-shaped districts.  Some districts may be situated inside other districts, but their borders do not intersect or touch.  Qatam is a resident of Circles Country.  When he travels between two locations, he always tries to cross the fewest number of district borders as possible because crossing borders is usually a laborious task.
  
  Imagine Circles Country as an infinite plane.  You are given int[]s *X*, *Y* and *R*, where (*X*[i], *Y*[i]) are the coordinates of the i-th district's center and *R*[i] is its radius.  Qatam is currently at point (*x1*,*y1*) and he needs to get to point (*x2*,*y2*).  Neither of these points lies on a district border.  Return the minimal number of district borders he must cross to get to his destination.
systests: 
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [2],
    -5,
    1,
    5,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -6, 6],
    [0, 1, 2],
    [2, 2, 2],
    -5,
    1,
    5,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, -3, 2, 5, -4, 12, 12],
    [1, -1, 2, 5, 5, 1, 1],
    [8, 1, 2, 1, 1, 1, 2],
    -5,
    1,
    12,
    1
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-3, 2, 2, 0, -4, 12, 12, 12],
    [-1, 2, 3, 1, 5, 1, 1, 1],
    [1, 3, 1, 7, 1, 1, 2, 3],
    2,
    3,
    13,
    2
  output: "5"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-107, -38, 140, 148, -198, 172, -179, 148, 176, 153, -56, -187],
    [175, -115, 23, -2, -49, -151, -52, 42, 0, 68, 109, -174],
    [135, 42, 70, 39, 89, 39, 43, 150, 10, 120, 16, 8],
    102,
    16,
    19,
    -108
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [7, 5],
    [-5, 0],
    [12, 6],
    -9,
    8,
    6,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [8, -14, 6, 8, 8],
    [-1, 5, 0, 2, -1],
    [15, 3, 4, 10, 14],
    4,
    -7,
    3,
    3
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-1, -17, 7, 22, 15, -23, -11, 22, 3, 0, -19, -20],
    [-1, 22, -20, 16, -19, -15, 21, 11, -15, 1, 21, -10],
    [8, 19, 12, 19, 3, 15, 7, 10, 5, 3, 16, 5],
    -22,
    18,
    -20,
    -23
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-1, -9, 20, 5, 21, -28, -18, -18, -30, 25, -29, -10, -1, -2, 30, -25],
    [29, -6, -13, 23, 15, 11, -27, -28, -22, -15, 7, 0, 28, 30, 28, 17],
    [16, 12, 16, 3, 9, 13, 5, 9, 3, 5, 3, 4, 14, 5, 6, 5],
    8,
    7,
    10,
    -12
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [7, 21, -1, -26, -32, -7, -3, -25, -24, -17, 21, 22, 14, 31, -30, -13],
    [-20, 21, -31, 25, 26, 1, 10, 25, 13, -27, 25, 21, 31, -26, -13, -33],
    [14, 18, 28, 3, 26, 3, 3, 7, 3, 4, 25, 4, 4, 4, 4, 3],
    30,
    -33,
    9,
    21
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-24, 8, -19, 7, 15, 21, 27, -21, -24, 29, -20, 25, -8, -4, 20, 26, 20, -28, 29, 11, -9, -27, 10, -15, 18, -27],
    [14, -27, 13, -10, -24, 31, -22, 24, 8, 12, -26, 11, 18, 9, 29, -25, -12, -22, -11, 23, 4, -32, -24, -2, -29, -3],
    [30, 8, 22, 6, 23, 7, 8, 8, 8, 12, 4, 7, 6, 3, 3, 3, 4, 3, 3, 5, 4, 4, 4, 4, 29, 3],
    -23,
    12,
    16,
    -16
  output: "5"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [3, -44, -8, -20, 77, 24, 36, 72, 70, 46, 49, -48, -55, 12, -39, -39, -1, 49, -4, 75, 64, -12, 43, 37, 9, 25, 76, -13, 50, -44, 41, 78, -33, 59],
    [-42, 69, -25, 76, -45, -36, 1, 79, 13, 43, 34, 78, 28, -55, 70, -61, 52, 29, -69, 35, -33, -46, -79, 8, 17, 78, -6, 14, -43, -1, -23, -72, 52, -22],
    [71, 38, 22, 8, 3, 6, 15, 34, 7, 5, 16, 13, 4, 10, 29, 11, 6, 8, 8, 10, 5, 48, 16, 4, 6, 8, 3, 4, 12, 5, 3, 6, 7, 5],
    38,
    -65,
    -64,
    75
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-49, 45, 73, 50, -55, -90, 11, -70, -58, 12, -96, 12, -68, 85, 91, -87, -57, 23, -75, -35, 52, -20, 89, 92, -77, -40, -36, 67, -9, 58, -45, -97, -14, 11, 8, 0, 12, 87, -9, -50, 26],
    [-71, -19, 6, -36, -68, 82, -12, 40, -66, 27, 76, -40, 97, -67, 82, -98, -75, 89, -20, 95, -52, 12, 96, -27, 75, 60, 48, 1, -48, -55, -17, -40, 67, -60, 55, 22, 90, 73, 5, -16, 12],
    [35, 68, 27, 8, 28, 89, 17, 17, 20, 6, 21, 5, 10, 3, 17, 7, 9, 18, 13, 5, 28, 3, 35, 4, 73, 3, 17, 16, 5, 5, 17, 12, 8, 6, 3, 4, 5, 3, 3, 8, 3],
    -92,
    98,
    -64,
    80
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-53, -19, 70, 74, -99, 86, -89, 96, -10, 98, 39, 88, -28, -93, -35, 49, -33, 82, 6, -51, 5, 78, -13, -94, -60, -49, -74, 48, -59, -88, -4, -24, 95, -51, -52, -11, -22, 58, 8, -56, 13],
    [87, -57, 11, -1, -24, -75, -26, 83, 11, 93, -56, 0, 54, -87, 30, -68, 94, 99, -15, 58, 32, 2, -96, -38, 66, -29, -99, 71, 33, 77, 67, -14, 61, 98, -55, -56, -57, -85, -6, -89, 48],
    [69, 22, 36, 21, 46, 21, 23, 34, 12, 3, 28, 6, 9, 5, 3, 8, 10, 8, 16, 5, 6, 3, 9, 9, 7, 3, 33, 13, 5, 21, 16, 12, 4, 3, 5, 5, 6, 6, 6, 6, 3],
    -83,
    -23,
    -92,
    63
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-72, 88, -35, 88, -10, 84, -38, -85, 77, 95, 36, -67, 19, 82, -64, -10, -89, 19, 54, -9, -72, 51, 93, 19, -27, 82, 78, 83, -51, -69, 22, -53, 85, -62, 38, -12, 27, -91, -36, -55, -8, -98],
    [-71, -2, 69, -91, -71, -80, -40, 25, 38, 75, 43, 57, 87, -76, 70, 1, 97, -16, -87, 99, 81, -34, 93, 29, 51, -18, -8, 28, 75, -24, 75, -70, -76, -89, 3, -95, -52, -54, 32, 55, -71, -20],
    [35, 9, 92, 54, 18, 16, 4, 9, 19, 11, 8, 55, 6, 24, 30, 19, 6, 6, 3, 12, 16, 9, 34, 8, 6, 3, 24, 3, 3, 5, 24, 10, 3, 5, 6, 5, 10, 8, 8, 10, 15, 4],
    27,
    75,
    -30,
    -17
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [26, -11, 98, 86, -69, 25, -5, -10, -5, -23, 93, -71, -70, 12, -83, 89, -78, -14, 91, 73, -44, -43, 62, -58, -56, 29, 24, 88, 18, 18, -63, 23, 6, -99, 98, 86, -30, 12, 44, -81, 3, -15, 82, 13, 98],
    [-18, 58, -72, 86, -42, -89, 48, 85, -60, -7, 80, -45, -64, -10, -41, -20, 39, -33, 14, 35, 65, -98, 91, -6, 27, -92, 12, -68, -27, 64, 77, -89, 94, -97, 19, -66, -75, 80, -1, 77, 24, -24, 96, -36, 65],
    [38, 45, 31, 36, 31, 14, 3, 11, 10, 3, 22, 35, 8, 3, 49, 13, 17, 4, 12, 8, 7, 3, 10, 3, 4, 21, 6, 15, 22, 6, 5, 28, 4, 3, 3, 8, 7, 3, 12, 4, 3, 3, 48, 11, 5],
    48,
    61,
    -91,
    -38
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-95, 81, -24, -7, -109, -53, 64, 99, 19, -81, -53, -17, 85, -19, 51, -70, -25, -100, -31, 17, -72, 103, -76, -15, 32, -97, 85, 80, -30, 104, 88, 85, -54, 49, -70, -82, -48, 12, 32, 73, 3, 89, -94, 32, -3, 15, 46, -95],
    [40, 38, 0, 73, -30, -37, 72, 25, 102, -46, -61, 3, -56, -78, -105, 69, -41, 34, -106, -105, -93, 25, -88, 105, -41, 92, 92, -49, -77, 18, 34, -52, -63, 105, -57, -87, 95, -28, 52, -6, -73, -109, -101, 51, 66, -62, -102, -36],
    [57, 64, 23, 23, 10, 8, 3, 28, 14, 10, 13, 10, 24, 16, 16, 15, 8, 29, 11, 10, 4, 22, 11, 4, 14, 4, 3, 8, 4, 9, 50, 17, 4, 7, 3, 23, 12, 6, 5, 5, 5, 14, 42, 8, 4, 9, 6, 3],
    81,
    10,
    18,
    43
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [54, 48, 67, -102, 44, -62, 29, -104, -91, 29, -4, 21, 92, -83, 20, -56, -13, -47, 85, 70, -91, 73, -101, 53, 96, 1, -59, -83, 105, -22, 55, 50, -97, -64, 70, 52, -31, 34, 70, -94, 3, -26, 1, -96, -108, 18, -99, 30, 100, 6],
    [-34, -13, 85, 96, 2, -54, 96, 101, 24, -96, 89, -45, -12, 21, -96, 85, 83, -6, 9, 86, -92, -92, -43, 24, -105, -77, 76, 44, 97, 106, 9, -14, 29, -62, 26, -54, -107, 68, -48, -103, 6, -36, -12, 13, -61, 60, 40, 9, 35, 64],
    [93, 63, 16, 23, 31, 20, 5, 9, 31, 22, 4, 13, 11, 8, 5, 24, 19, 8, 4, 12, 13, 17, 6, 3, 7, 11, 4, 4, 7, 4, 8, 11, 43, 11, 3, 8, 18, 5, 7, 26, 10, 6, 7, 7, 5, 5, 5, 6, 4, 5],
    69,
    64,
    -50,
    95
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [493, 443, 615, -935, -663, 400, -563, 635, 269, -954, 769, -198, 264, -43, -484, 194, 838, 957, -756, 182, -559, -430, 779, 641, -176, 664, -926, 485, 875, -86, -872, 65, 9, -540, -757, 959, 351, -206, 502, -863, 126, 459, 556, -755, 642, 472, 317, -925, -531, 640],
    [-310, -124, 781, 879, 542, 21, -490, 774, 881, 925, 56, 484, -879, 812, 143, -411, -109, -509, 195, -874, -910, -59, 84, 790, 992, -839, -397, 223, -957, 855, 827, 681, -703, 699, 403, 889, -488, 970, 87, -419, 168, -128, 462, -697, 242, -494, 624, -755, -957, -438],
    [823, 556, 124, 185, 217, 262, 162, 269, 26, 65, 90, 185, 182, 17, 108, 101, 79, 71, 50, 29, 246, 55, 19, 89, 322, 130, 36, 3, 44, 14, 33, 61, 80, 13, 20, 42, 70, 19, 55, 142, 30, 76, 34, 40, 11, 50, 25, 661, 147, 39],
    -160,
    -741,
    -92,
    170
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [388, -960, -10, 788, -818, -26, 525, 445, 273, -406, 840, -923, 441, 169, 232, -838, -945, 729, -43, 862, 948, -84, -136, -29, 973, -652, -616, 787, -855, 93, -246, -833, -9, -557, -409, 739, 988, -539, -569, 19, 371, 858, 161, -944, -769, -886, -517, -886, -154, 554],
    [985, 497, -703, -164, -560, -796, -566, 735, -194, -318, 922, 310, -578, -195, 435, -861, 515, -835, 966, -128, 827, -499, 744, 239, 939, -927, 610, 625, 345, 701, 278, 994, 394, -555, -562, -827, 993, 238, -398, 501, -4, 162, -763, 280, 462, 696, -825, -570, -119, 890],
    [8, 667, 317, 255, 74, 55, 21, 48, 4, 144, 632, 306, 19, 212, 25, 66, 55, 269, 63, 150, 61, 56, 93, 28, 196, 109, 74, 142, 10, 92, 46, 99, 84, 66, 74, 186, 92, 44, 7, 18, 26, 63, 61, 18, 42, 53, 59, 146, 93, 65],
    793,
    -211,
    430,
    183
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-380, 939, 867, -150, 393, -796, -471, -60, -955, 921, 631, -898, -804, -929, 290, 32, -29, 700, -44, -875, 974, -237, 832, -319, -400, 461, -430, -893, 872, 588, -797, -556, 412, -138, 710, -805, -726, -875, -900, 586, -537, 311, -487, 855, 44, 875, 631, 809, -790, 295],
    [-989, -944, 211, 271, -141, 989, -553, -951, 922, -113, -329, -675, 940, 217, 946, -734, 252, 600, 387, 665, 273, -70, -485, 956, -496, 132, 345, -720, -770, -430, -907, -554, 604, -445, -653, 374, 69, -305, -243, 925, -661, 695, 211, -909, 644, 458, -960, 82, 119, 926],
    [736, 255, 488, 492, 3, 69, 220, 334, 440, 130, 60, 13, 15, 113, 8, 98, 331, 8, 175, 59, 79, 18, 45, 156, 30, 72, 34, 71, 15, 172, 19, 14, 59, 23, 8, 36, 40, 79, 165, 46, 39, 65, 26, 351, 26, 80, 4, 70, 36, 82],
    652,
    -695,
    137,
    435
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [129, 807, 391, -845, 197, 910, -843, -442, 977, -770, 666, 404, 71, 865, 113, -961, -49, 395, 17, -267, -202, 892, 366, 708, -121, -96, -254, -920, 348, -164, 649, -323, -84, 967, -432, 873, 534, -43, -652, 515, 226, -625, 436, -472, -952, 834, 86, 724, -977, -183],
    [714, -716, 43, -610, 922, -158, -878, 345, -993, 157, -814, 812, -584, -401, 83, -870, 888, 916, -120, -310, -892, -793, 671, -776, -147, 517, -838, -572, 872, 217, 727, -926, 181, -19, 330, 506, -511, -409, -481, -315, -963, -625, 321, -662, 506, 573, 958, -354, 232, 771],
    [953, 437, 191, 510, 577, 73, 208, 73, 12, 37, 169, 241, 100, 55, 77, 12, 12, 129, 97, 122, 175, 19, 89, 66, 36, 49, 78, 100, 326, 45, 4, 27, 39, 26, 231, 140, 72, 31, 89, 45, 137, 46, 48, 87, 15, 21, 16, 24, 89, 67],
    98,
    358,
    789,
    -901
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-217, 544, -323, 574, 102, -272, 356, -451, 533, 168, -130, 346, -92, 182, 41, -496, 583, 558, -233, -241, 416, 354, 636, 519, 129, -679, -548, -443, -676, -392, 213, -629, -502, 259, -386, -396, -394, -672, 289, -202, -370, -355, -645, 23, -522, -389, -151, -31, -354, -184],
    [-34, 105, -181, -639, 571, -26, -563, 101, -547, -266, 540, 652, -13, -273, 489, -659, 43, 96, -306, -9, -38, 609, -576, -638, -392, 36, 475, 280, 100, 397, -23, -413, 676, 575, -494, 622, -241, -667, 94, -605, 391, -412, -274, 10, 539, -634, -569, -20, -72, 593],
    [343, 269, 634, 261, 140, 132, 6, 67, 53, 38, 12, 10, 40, 21, 34, 33, 23, 112, 45, 69, 57, 112, 373, 18, 60, 120, 26, 39, 11, 35, 64, 32, 241, 5, 7, 68, 10, 7, 11, 25, 5, 38, 81, 35, 6, 3, 190, 20, 30, 26],
    -499,
    215,
    186,
    -249
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-389, -473, 344, 265, 607, 382, 599, 324, 67, -383, 398, 196, -394, -306, 561, -661, -583, 184, -648, -236, 471, 528, -520, -120, -278, -157, -309, -17, 298, -285, 671, -338, -141, -106, -215, -34, -549, 403, 366, -204, -640, 233, -259, 152, -415, 343, -608, 313, -159, -545],
    [223, -467, 417, 107, 406, -177, 585, -486, 35, 451, 458, -352, 333, -499, -684, -454, 140, 531, 567, -557, -609, 273, 396, 562, 650, -249, 350, 296, 11, 645, 52, 18, 560, 500, 16, -98, -632, 414, 406, -145, -678, -103, 412, 614, -206, 629, -580, 430, 512, -196],
    [323, 348, 100, 37, 48, 19, 623, 449, 6, 20, 302, 197, 56, 150, 46, 31, 94, 44, 55, 35, 8, 65, 79, 9, 44, 18, 18, 31, 14, 104, 64, 44, 3, 11, 44, 64, 12, 10, 138, 49, 27, 48, 18, 6, 11, 37, 63, 48, 3, 23],
    415,
    118,
    236,
    -485
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-355, -432, 314, 242, 553, 348, 546, 61, -349, 363, 178, -360, -279, 512, -603, -532, 168, -592, -216, 430, 481, -474, 313, -110, -254, -143, -282, 586, -16, 271],
    [204, -426, 380, 98, 371, -161, 534, 32, 411, 418, -321, 304, -455, -624, -415, 127, 484, 517, -508, -555, 249, 361, -510, 512, 593, -227, 320, -581, 270, 10],
    [295, 318, 91, 34, 44, 18, 568, 6, 19, 276, 180, 51, 137, 42, 28, 86, 40, 51, 32, 8, 59, 72, 431, 9, 40, 17, 17, 139, 29, 13],
    602,
    422,
    71,
    -260
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [115, 716, 347, -750, 175, 808, -748, -393, 868, -684, 591, 359, 63, 768, 100, -854, -44, 351, 15, -237, -179, 792, 325, 629, -107, -85, -226, -817, 309, -146],
    [634, -636, 38, -541, 819, -141, -779, 307, -881, 139, -722, 721, -518, -356, 74, -772, 788, 813, -107, -276, -792, -704, 596, -689, -130, 459, -744, -508, 775, 193],
    [847, 389, 170, 453, 513, 65, 185, 65, 11, 34, 151, 214, 90, 49, 68, 11, 11, 115, 86, 109, 156, 17, 80, 59, 32, 44, 69, 90, 290, 40],
    82,
    482,
    -183,
    135
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-79, 568, -368, 518, 325, -695, -65, 348, 651, -902, 545, 891, -146, 437, 101, -175, 873, 984, -938, -220, -840, 659, -675, 966, -92, 727, -367, -908, -16, -799],
    [559, 472, -638, 217, -625, 904, -939, -136, -649, -642, 835, -424, 198, 837, -42, 476, -337, 543, 843, 987, -209, -953, -747, 610, 216, 361, 76, 137, -923, -235],
    [920, 156, 150, 43, 107, 147, 131, 37, 54, 155, 114, 385, 458, 227, 56, 173, 165, 22, 13, 244, 79, 138, 63, 12, 98, 13, 16, 10, 16, 150],
    904,
    -137,
    -619,
    826
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [95, 198, -248],
    [-579, 738, -946],
    [959, 64, 161],
    -696,
    -492,
    235,
    383
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-9, 919, 177, 228],
    [210, -997, 86, 82],
    [409, 122, 906, 32],
    809,
    -998,
    -717,
    713
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-412, -418, 55, 439, 647],
    [240, 247, 152, 397, -163],
    [22, 309, 882, 307, 107],
    -205,
    772,
    -683,
    -319
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-41],
    [952],
    [447],
    -318,
    -219,
    -390,
    649
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-41],
    [952],
    [447],
    -31,
    819,
    -390,
    649
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [42, -94, -60, -161, -113, -45, 111, -20, 166, -147],
    [-123, 127, 71, 154, 39, 10, -17, 61, -101, 79],
    [72, 199, 125, 5, 42, 3, 27, 4, 38, 6],
    -101,
    8,
    36,
    -175
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-217, 185, -56, -17, -249, -121, 147, 225, 43, -184, -63, -39, 195, 172, -44],
    [92, 87, -1, 167, -68, -84, 165, 57, 232, -105, -158, 7, -128, -198, -177],
    [126, 141, 49, 50, 19, 14, 4, 61, 28, 19, 77, 18, 52, 141, 33],
    -55,
    115,
    -91,
    -17
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [165, -281, 126, -9, -285, 17, -159, -144, -187, -113, 171, -207, 205, 7, 204],
    [-26, 105, -10, -240, -109, -52, 31, 221, 84, -127, -22, -282, 182, -58, -152],
    [240, 15, 34, 16, 130, 46, 15, 64, 76, 30, 226, 16, 13, 30, 30],
    124,
    33,
    -112,
    240
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-190, 469, 433, -75, 196, -398, -235, -30, -477, 460, 315, -449, -402, -464, 145, 16, -14, 350, -22, -437, 487, -118, 416],
    [-494, -472, 105, 135, -70, 494, -276, -475, 461, -56, -164, -337, 470, 108, 473, -367, 126, 300, 193, 332, 136, -35, -242],
    [369, 129, 245, 247, 3, 36, 111, 168, 221, 66, 31, 8, 9, 58, 5, 50, 167, 5, 89, 31, 41, 10, 24],
    -123,
    -120,
    -56,
    -487
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [371, -389, 280, -288, -351, 84, 493, -403, 32, 328, 311, -439, -476, -424, 339, -374, 202, 86, 392, -383, 22, -333, 365, 302],
    [-254, 240, -25, 238, -383, -300, -363, 297, -109, -138, -402, 292, 231, -401, 494, 413, 316, -304, -315, 271, -184, -388, -208, 448],
    [482, 256, 175, 43, 218, 85, 8, 444, 12, 6, 26, 366, 52, 17, 118, 17, 102, 3, 8, 14, 18, 165, 408, 19],
    -426,
    -105,
    23,
    -341
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [741, 824, 256, -800, -589, 725, -687, -313, -401, 297, -636, -530, 701, 581, 576, -540, -485, 785, -380, 589, -564, 446, -358, -36, -293],
    [81, -5, -538, -602, 217, 157, 389, 801, -705, -832, 687, 752, 398, 14, 227, 613, -145, -489, 192, 324, 633, 333, -698, 726, 685],
    [825, 146, 19, 144, 483, 478, 147, 78, 263, 168, 8, 24, 47, 32, 7, 54, 94, 50, 124, 20, 14, 64, 87, 124, 10],
    -475,
    419,
    -434,
    160
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-746, 258, -577, 216, 475, 648, 788, 821, -930, -649, -725, -441, -832, 989, 130, 504, 963, -245, 181, -133, 617, 786, 617, 971, -744, 16, -203, -125, 291, 59, -957],
    [447, -822, 403, -323, -743, 956, 844, -686, -826, 738, 264, 451, -226, 561, 135, -947, -908, 542, 823, 285, 887, -768, -379, -876, -456, -653, 575, 361, -474, -534, 640],
    [841, 170, 589, 119, 626, 140, 704, 163, 320, 175, 180, 75, 24, 324, 48, 889, 53, 108, 55, 31, 23, 14, 33, 14, 30, 36, 47, 18, 37, 63, 85],
    172,
    -436,
    732,
    145
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [346, -858, -381, 383, -341, 410, -649, 924, 641, -860, -293, -937, -462, -787, 683, 856, 315, 367, 469, -123, 938, -280, 666, 967, -369, -934, -819, 705, 745, 621, 926, 180, -814, -813, -662, 124, 893, 746],
    [-487, 572, 298, 837, -793, -727, -574, -24, 864, 930, 285, 482, 818, 869, 900, 633, 279, -354, 983, 93, -691, -893, -545, 789, -427, -431, 241, 541, 121, 941, 89, -532, 213, 79, 204, 729, -470, 0],
    [519, 830, 274, 242, 200, 210, 137, 25, 628, 236, 63, 109, 117, 128, 737, 33, 4, 135, 27, 15, 52, 48, 14, 249, 50, 164, 25, 90, 7, 8, 21, 75, 64, 9, 7, 7, 21, 22],
    306,
    29,
    -75,
    73
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-337, -948, -238, 855, -602, 14, 207, -252, -575, -616, 222, -55, -168, 929, -936, -10, 901, 518, -811, 995, -588, -604, -970, 818, -424, -744, 757, -280, 15, 511, 799, 237, 444, 288, 165, 397, -100, -604, -676, 928, 629, -682, -992],
    [448, -457, 258, -421, -797, -818, -634, -617, -269, 707, 636, 386, 633, -445, 428, 381, -457, -818, 18, -979, 685, -233, 416, 27, -542, -758, 521, -335, -251, -155, -920, -538, -348, 89, -157, -870, 828, 734, -459, -965, 455, 542, -615],
    [871, 23, 35, 40, 27, 221, 12, 57, 49, 13, 124, 510, 133, 123, 63, 144, 244, 223, 44, 161, 9, 112, 217, 213, 98, 66, 211, 82, 82, 15, 27, 41, 71, 47, 63, 46, 13, 91, 77, 62, 17, 39, 55],
    788,
    -598,
    -720,
    594
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-33, 912, 786, 808, 575, -888, -829, -997, 265, -601, -977, 672, 576, 892, -584, 54, -170, -947, -709, -883, 75, -1, -816, 422, -628, 496, -861, -987, -268, 740, 263, -256, 926, -650, -792, -344, 803, 592, -344, 304, -72, -785, -252, -484, 837, -296],
    [730, -865, 274, 104, 390, 754, -291, 803, -880, -288, -369, 270, 355, 279, -837, 468, -231, 838, -264, 475, 11, -972, 927, -715, 126, -974, -575, -128, -33, 897, -924, -906, 226, 736, 242, 261, 970, -45, 680, -21, 766, 707, 110, 108, -117, -998],
    [212, 241, 451, 673, 30, 318, 378, 31, 182, 755, 68, 4, 101, 201, 177, 38, 281, 26, 177, 33, 6, 59, 127, 30, 43, 32, 29, 52, 3, 54, 3, 23, 52, 71, 130, 131, 30, 5, 89, 94, 121, 30, 10, 40, 34, 12],
    -864,
    10,
    925,
    -323
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [144, -195, 128, 132, -215, 105, -114, 120, 117, 38, 211, 155, 164, -220, 78, 10, 203, 171, -173, -97, -15, -14, -46, -70, -7, 217, 47, -224, 143, -229, -99, 36, -142, -226, -114, -91, 184, 57, -129, 67, -160, -203, -111, 105, 78, -225, -220, 159, 39],
    [-98, 21, -125, 122, -209, 41, -59, 5, 191, -205, -133, -73, 191, 130, -121, 49, -155, 23, 85, -222, -13, -129, 226, -119, 155, 185, -135, -19, 184, -200, 131, 215, -168, 127, 4, 57, 221, -209, 194, 101, 76, 91, -24, 193, -192, -13, 228, 147, 55],
    [98, 163, 137, 13, 25, 16, 49, 4, 122, 9, 10, 47, 9, 22, 3, 19, 9, 5, 41, 21, 12, 3, 44, 19, 6, 10, 3, 19, 89, 47, 10, 3, 3, 14, 11, 12, 18, 9, 19, 17, 21, 9, 8, 10, 13, 37, 12, 3, 5],
    120,
    176,
    -153,
    -91
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [144, -195, 128, 132, -215, 105, -114, 120, 117, 38, 211, 155, 164, -220, 78, 10, 203, 171, -173, -97, -15, -14, -46, -70, -7, 217, 47, -224, 143, -229, -99, 36, -142, -226, -114, -91, 184, 57, -129, 67, -160, -203, -111, 105],
    [-98, 21, -125, 122, -209, 41, -59, 5, 191, -205, -133, -73, 191, 130, -121, 49, -155, 23, 85, -222, -13, -129, 226, -119, 155, 185, -135, -19, 184, -200, 131, 215, -168, 127, 4, 57, 221, -209, 194, 101, 76, 91, -24, 193],
    [98, 163, 137, 13, 25, 16, 49, 4, 122, 9, 10, 47, 9, 22, 3, 19, 9, 5, 41, 21, 12, 3, 44, 19, 6, 10, 3, 19, 89, 47, 10, 3, 3, 14, 11, 12, 18, 9, 19, 17, 21, 9, 8, 10],
    -148,
    -31,
    75,
    177
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-126, -159, 105, 159, -69, 24, 173, -203, 145, -86, -44, 171, -82, 122, -110, -144, 136, 163, 126, -167, -203, 37, -104, 24, 5, -116, 153, 39, -74, -62, -39, 20, -99, 95, 88, -86, -183, 140, -131, 194, 10, -156, 96, -190, 106],
    [190, -109, -113, -156, 27, 146, -74, -134, 154, -176, -37, -46, -197, 165, 3, -57, -2, 207, 205, -204, 42, -66, 61, -161, 200, 207, 98, 19, -76, -98, 79, -153, 200, -204, -80, 74, -122, 0, 158, -187, -97, -202, 114, -9, 35],
    [74, 8, 19, 193, 84, 18, 49, 41, 94, 29, 5, 10, 7, 24, 11, 18, 13, 19, 165, 130, 27, 13, 35, 33, 13, 11, 19, 8, 3, 6, 4, 3, 37, 31, 18, 4, 7, 24, 4, 20, 17, 6, 16, 23, 3],
    -111,
    134,
    -35,
    -31
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-29, -40, 396, -108, 632, 459, -443, 288, -603, 659, 167, -83, 602, -102, 462, 601, -631, 575, -271, -306, 597, -462, -602, -27, -124, -430, 166, 456, 645, -187, -260, 505, -584, -260],
    [-213, -235, 109, 424, -147, -575, -94, -117, 444, 528, 314, -186, 574, -649, -541, -619, -340, 71, -13, -586, 652, 329, 597, 394, -178, -657, 411, -148, -204, -190, 427, 506, 346, -392],
    [61, 356, 103, 180, 16, 200, 49, 4, 53, 36, 83, 240, 254, 15, 144, 366, 198, 65, 5, 44, 399, 100, 21, 90, 172, 96, 9, 98, 30, 44, 19, 72, 226, 18],
    -472,
    -529,
    265,
    -269
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [315, 416, 528, 276, 646, 129, 263, 474, 441, 28, 660, 279, 474, 603, 194, 29, 540, 413, 619, 200, 165, 98, 440, 659, 102, 414, 350, 211, 491, 466, 398, 28, 392, 413],
    [223, 434, 385, 542, 256, 178, 588, 271, 414, 552, 594, 5, 58, 2, 323, 629, 179, 536, 312, 544, 57, 335, 400, 167, 410, 425, 100, 39, 567, 422, 34, 584, 529, 348],
    [59, 505, 101, 178, 14, 99, 94, 2, 553, 51, 34, 13, 43, 4, 3, 19, 67, 7, 232, 17, 15, 36, 597, 38, 5, 495, 44, 21, 10, 648, 15, 1, 45, 16],
    15,
    643,
    479,
    192
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [544, 183, 559, 446, 139, 530, 41, 544, 483, 320, 135, 393, 439, 76, 340, 585],
    [613, 81, 356, 163, 292, 592, 277, 602, 158, 529, 513, 615, 564, 162, 158, 415],
    [272, 91, 600, 165, 2, 152, 8, 1, 7, 6, 50, 7, 9, 38, 23, 16],
    238,
    -22,
    157,
    -215
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [63, 102, 44, 4, 118, 78, 5, 5, 113, 9, 95, 56, 48, 18, 119, 56, 88, 56, 17],
    [28, 44, 118, 13, 26, 32, 78, 5, 70, 26, 93, 80, 93, 81, 44, 35, 88, 8, 80],
    [104, 36, 9, 35, 1, 5, 25, 13, 7, 8, 4, 21, 3, 3, 14, 114, 1, 9, 11],
    -115,
    -4,
    39,
    83
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [42, 55, 28, 43, 6, 39, 56, 3, 32, 42, 19, 60, 10, 36, 43, 34, 25, 15, 77, 55],
    [80, 76, 76, 20, 22, 11, 59, 75, 57, 73, 60, 37, 29, 26, 16, 43, 38, 41, 55, 39],
    [79, 3, 43, 14, 3, 3, 5, 16, 10, 71, 1, 7, 5, 3, 1, 4, 1, 5, 10, 1],
    4,
    33,
    -48,
    66
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-26, -47, -15, -39, -45, -32, -40, -30, -40, -25, -48, -1, -41, -3, -39, -3, -34, -14, -15, -4],
    [-21, -37, -10, -37, -33, -24, -8, -9, -22, -36, -6, -10, -47, -48, -30, -39, -31, -13, -32, -25],
    [18, 49, 1, 2, 3, 3, 1, 4, 2, 2, 2, 2, 7, 2, 1, 3, 1, 2, 2, 3],
    -38,
    -11,
    18,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-8, 13, -10, -2, -7, 2, -10, 13, 8, 13, 2, -11, -11, -11, 10, -7, -13, -2, -7, -9, -8, 8, -11, -12, -13, -3, 10, -6, -2, -11, 0, 11, 6, 13, 4, -10, 11, 8, 1, -4, 7, 3, 3, 4, -11, 13, -13, 6, 11, -12],
    [-6, 4, 10, -1, -6, 12, -8, 3, -2, -7, 11, -7, -9, 0, 13, -5, 3, -5, 0, -11, -5, 7, 4, -4, 13, -10, 10, -2, -8, 0, 7, -1, 2, 11, -2, 11, -7, 3, 11, 4, 5, 4, 0, -8, 9, -8, -9, -13, -13, -11],
    [9, 4, 3, 1, 13, 4, 6, 2, 2, 5, 6, 1, 4, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    14,
    -9,
    -11,
    0
  output: "6"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-4, 0, 7, -4, -7, -2, -5, 1, -6, 8, 9, 6, -6, 6, -3, 3, 6, -9, -1, 8, 1, -5, -9, -4, 8, -2, 0, 3, 9, 5, -6, -6, 3, -9, 6],
    [-7, 5, 0, 8, 0, 7, -6, -4, 9, -6, 8, -8, 5, -9, 9, -8, -1, -4, 6, 1, 9, -6, -8, 2, 5, -9, 4, -1, -9, -6, -9, 5, 8, 1, -9],
    [4, 3, 3, 10, 1, 7, 2, 1, 1, 1, 2, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6],
    9,
    -9,
    -7,
    7
  output: "5"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [10, -11, 0, 4, 11, 1, 7, -9, 1, -9, -9, 8, -8, 10, 5, -2, -2, 1, 10, -3, 3, -11, -9, -11, 9, -3, 10, 11, 7, -5, 7, 9, -3, 4, -10, -5, -6, -7, 5, -10, 11, -5, -3, 4, 10, 0, 4, 1, -8, -4],
    [-6, -4, -5, -4, 0, 6, 11, 4, -9, 10, 10, 4, -3, -11, 11, 0, 9, 0, -10, 2, 10, -7, -5, -2, -8, 5, -4, -1, -2, 1, -10, 7, -11, 2, -11, 6, 3, -11, 0, 0, 11, 11, -8, -8, 9, 3, -4, -3, -7, -6],
    [12, 6, 1, 2, 3, 2, 1, 2, 2, 3, 2, 1, 1, 5, 4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    9,
    -2,
    -6,
    -5
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [5, 12, -12, 14, -11, 0, 7, 14, -8, 5, 6, -5, 13, -7, 9, -13, -12, 6, 7, -10, -14, -10, -9, 1, 14, 14, 3, 0, 2, -13, -6, 7, -7, -4, 13, 0, -2, -10, 6, -12, -7, -13],
    [10, -3, -6, -10, 6, -2, 10, -11, 6, -1, -4, -11, 9, 1, -9, -11, -14, -11, -8, 0, 10, 6, 13, -8, 13, 5, -12, -12, 13, 11, -6, 9, 7, -12, -8, 11, 0, -12, -4, -5, 7, 2],
    [7, 3, 3, 4, 9, 4, 4, 1, 4, 1, 2, 3, 1, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 2, 3, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    10,
    -3,
    5,
    -5
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-47, 44, 33, 22, -39, 55, 44, -40, -4, 21, 16, 11, -46, 22, 29, -11, -34, -37, 19, 22, -53, -9, 9, 0, 3, -9, 34, 38, -29, 45, 51, -5, 0, 55, -14, -35, 36, -7, 2, 46, 27, -16, -51, 2, -18, 3],
    [11, 0, -1, -52, 24, 49, -44, 7, -44, -17, -54, -16, -14, 43, -55, -8, 19, -53, -45, 34, 40, -33, -19, 11, 46, 1, 30, 47, -9, -2, 51, 15, 55, -15, -15, -22, 7, 33, -32, 3, -4, -54, 48, 6, 19, -16],
    [53, 21, 2, 14, 10, 15, 1, 38, 9, 2, 1, 1, 12, 6, 24, 4, 18, 9, 2, 19, 1, 1, 10, 1, 1, 3, 2, 1, 2, 8, 8, 2, 5, 2, 1, 1, 3, 1, 4, 16, 1, 3, 2, 2, 1, 2],
    51,
    -26,
    0,
    -11
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-13, 12, 9, 6, -11, 15, 12, -11, -1, 6, 4, 3, -13, 14, 6, -3, -10, -15, -7, 0, -2],
    [3, 0, 0, -15, 6, 14, -12, 2, -12, -4, -15, -4, -4, -1, 12, -2, -15, 11, 0, 13, 0],
    [15, 6, 1, 4, 3, 5, 1, 11, 3, 1, 1, 1, 4, 10, 2, 1, 3, 1, 2, 1, 1],
    -4,
    7,
    -7,
    9
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-471, 441, 335, 224, -391, 546, 444, -402, -48, 217, 36, 166, 110, -461, 227, 296, -119, -341, -370, 195, 26, -168, -527, -244, -99, -82, 91, -2, 33, 60, -93, 345, -418, 386, -293, 449, 510, -485, -289, -142, -354],
    [113, 5, -12, -524, 241, 493, -440, 70, -445, -171, 293, -541, -164, -142, 433, -555, -85, 195, -532, -451, 518, 376, 398, -1, -336, -126, -195, 111, 456, -163, 15, 302, -29, 473, -93, -23, 513, -448, -449, -155, -223],
    [520, 208, 13, 139, 95, 143, 9, 370, 80, 15, 11, 4, 8, 115, 55, 231, 32, 172, 88, 17, 76, 6, 8, 41, 1, 3, 97, 1, 6, 36, 28, 14, 4, 4, 18, 74, 77, 40, 24, 9, 1],
    12,
    112,
    -359,
    364
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-447, -567, 372, 564, -247, 88, 615, -723, 518, -506, -244, 703, -158, 608, -345, -293, 435, 587, -393, -513, 486, 580, -706, -723, -226, 132, 85, 18, -412, 543, -530, 140, -265, -220, -141, 74, 196, -277, -351, 315, -307, -652, 649, 498, -503, -465, 690, 38],
    [675, -389, -402, -556, 96, 518, -265, -477, 549, -479, -683, -744, -134, -166, -543, -700, 589, 187, 13, -204, -10, 737, -250, 151, -605, -234, -574, 713, 738, 351, -99, 68, -272, -348, 283, -546, 243, -415, 712, -284, 262, -435, 636, -3, 264, 561, -664, -345],
    [255, 19, 60, 679, 289, 54, 166, 137, 324, 78, 126, 310, 9, 28, 31, 16, 78, 41, 32, 57, 36, 59, 44, 88, 20, 37, 108, 38, 30, 57, 45, 20, 3, 12, 6, 3, 101, 48, 124, 55, 7, 16, 52, 78, 13, 5, 63, 51],
    -490,
    -671,
    -370,
    -251
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [721, -681, 171, 399, -771, 221, 550, 697, 270, -529, -468, 73, 766, 766, 749, -611, -280, 101, -702, -719, 353, 692, -11, 724, -616, -504, -431, -421, 378, -280, 210, 458, -514, 39, -706, 591, 610, -251, -223, 188, 550, -760, 173, 532, 308, 573, -742, 372, -263],
    [716, -186, 486, -426, 107, -299, -628, -238, -254, -343, -130, 91, -646, -240, 728, -86, 739, -592, 292, -230, 202, -402, 722, 703, -756, 416, -270, 464, -681, 151, 599, -303, 775, 560, 558, -704, 193, 137, -529, -530, -486, -185, 411, -585, -524, -484, 427, -348, -667],
    [348, 308, 212, 470, 629, 115, 172, 34, 231, 24, 81, 75, 15, 19, 163, 5, 162, 87, 109, 105, 72, 88, 51, 371, 173, 33, 13, 29, 740, 105, 4, 30, 72, 3, 93, 4, 44, 19, 49, 17, 8, 6, 85, 53, 39, 9, 289, 8, 46],
    -645,
    -455,
    -394,
    101
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [22, -276, -54, -128, 483, 391, 151, -455, 230, 451, -455, 438, 290, -96, -305, 80, -357, -245, -248, 212, -12, 231, -29, 403, 135, -8, 206, 179, -125, -486, -233, 232, -125, 253, 57, 158, 480, -84, 192, 313, -276, -191, -243, 489, 208, 209, 256, -63, -226],
    [-267, 435, -159, 475, -284, 144, -229, 148, 6, 498, -458, 84, 271, 273, 487, -343, 4, 441, -386, -309, 330, 234, -432, -208, -213, 396, -251, 214, -16, -165, -357, 51, 430, 359, 111, 489, -38, 93, 200, -271, -8, -161, 195, -60, -390, -368, -144, 207, -34],
    [427, 223, 121, 35, 1, 113, 19, 104, 81, 200, 54, 28, 15, 12, 66, 46, 22, 166, 53, 183, 20, 3, 36, 19, 47, 14, 22, 72, 14, 88, 114, 8, 10, 21, 22, 34, 2, 8, 38, 62, 15, 6, 9, 14, 18, 50, 3, 32, 15],
    161,
    53,
    -456,
    54
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 5, 5, 12, 12],
    [0, 0, 0, 0, 0, 0],
    [2, 1, 2, 1, 3, 2],
    0,
    0,
    11,
    1
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 5, 5, 12, 12, 15, 13],
    [0, 0, 0, 0, 0, 0, 0, 5],
    [2, 1, 2, 1, 3, 2, 7, 1],
    0,
    0,
    11,
    1
  output: "5"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 5, 5, 12, 12, 15, 13, 6, 14],
    [0, 0, 0, 0, 0, 0, 0, 5, 4, 23],
    [2, 1, 2, 1, 3, 2, 7, 1, 2, 73],
    -80,
    0,
    11,
    1
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
    0,
    0,
    0,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [45, 23, 27, 7, 3, 28, 29, 17, 2, 10, 42, 39, 44, 19, 6, 16, 8, 14, 49, 18, 5, 1, 26, 30, 25, 11, 12, 40, 21, 24, 31, 13, 48, 20, 35, 50, 36, 15, 38, 43, 41, 33, 47, 34, 22, 9, 46, 32, 4, 37],
    0,
    0,
    110,
    -60
  output: "50"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 153, 259, 441, 418, 331, 35, 79, 429, 91, 205, 169, 432, 13, 143, 134, 387, 175, 494, 362, 215, 319, 128, 328, 65, 28, 261, 342, 286, 473, 304, 233, 466, 196, 459, 106, 353, 483, 392, 373, 409, 114, 274, 59, 224, 86, 294, 49, 185, 244],
    0,
    0,
    110,
    -60
  output: "12"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 153, 259, 441, 418, 331, 35, 79, 429, 91, 205, 169, 432, 13, 143, 134, 387, 175, 494, 362, 215, 319, 128, 328, 65, 28, 261, 342, 286, 473, 304, 233, 466, 196, 459, 106, 353, 483, 392, 373, 409, 114, 274, 59, 224, 86, 294, 49, 185, 244],
    38,
    34,
    131,
    23
  output: "8"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [356, 85, 103, 396, 366, 55, 138, 279, 163, 91, 317, 115, 202, 386, 146, 155, 324, 171, 187, 447, 37, 124, 222, 234, 244, 345, 434, 69, 285, 418, 13, 407, 301, 465, 29, 218, 292, 425, 457, 265, 75, 49, 379, 474, 337, 193, 252, 485, 9, 494],
    462,
    320,
    457,
    29
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [252, 13, 171, 296, 29, 55, 118, 75, 84, 146, 336, 366, 489, 264, 184, 345, 273, 397, 418, 137, 217, 152, 126, 433, 242, 382, 167, 467, 303, 31, 372, 311, 493, 91, 329, 356, 229, 68, 281, 446, 194, 407, 423, 203, 109, 453, 239, 474, 8, 47],
    20,
    385,
    199,
    30
  output: "19"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 0, 132, 0, 0, 0, 0, 433, 0, 0, 0, 0, 0, 50, 234, 0, 0, 0, 11],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 0, 111, 0, 0, 0, 0, 457, 0, 0, 0, 0, 0, 497, 12, 0, 0, 0, 480],
    [184, 99, 106, 27, 132, 53, 217, 66, 3, 41, 144, 2, 39, 2, 11, 158, 74, 177, 5, 196, 115, 167, 224, 127, 1, 2, 84, 205, 231, 3],
    329,
    101,
    61,
    243
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 295, 152, 343, 0, 0, 0, 43, 0, 324, 0, 0, 0, 417, 0, 0, 0, 0, 48, 0, 0, 0, 289, 0, 495, 341, 164, 446, 405, 0, 187, 246, 4, 460, 0, 317, 0, 0, 463, 0, 211, 413, 467, 62, 0, 359, 0],
    [0, 0, 63, 342, 282, 0, 0, 0, 439, 0, 387, 0, 0, 0, 299, 0, 0, 0, 0, 461, 0, 0, 0, 282, 0, 324, 201, 370, 306, 125, 0, 214, 425, 447, 295, 0, 380, 0, 0, 336, 0, 42, 331, 233, 278, 0, 3, 0],
    [84, 13, 2, 7, 2, 107, 66, 167, 51, 33, 17, 112, 124, 21, 196, 159, 78, 177, 147, 75, 202, 213, 223, 12, 132, 308, 53, 2, 10, 3, 238, 2, 1, 135, 98, 182, 36, 92, 197, 270, 56, 1, 31, 7, 19, 2, 40, 41],
    477,
    24,
    481,
    208
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [337, 0, 186, 0, 307, 0, 0, 0, 397, 0, 17, 0, 0, 269, 0, 345, 0, 69, 0, 330, 317, 0, 0, 0, 303, 0, 60, 0, 0, 327, 272, 220, 164, 375, 11, 397, 41, 393, 0, 126, 0, 262, 121, 0, 0, 0, 0, 0],
    [242, 0, 307, 0, 27, 0, 0, 0, 309, 0, 227, 0, 0, 172, 0, 272, 0, 264, 0, 69, 123, 0, 0, 0, 243, 0, 381, 0, 0, 215, 356, 191, 295, 257, 369, 106, 350, 322, 0, 215, 0, 239, 226, 0, 0, 0, 0, 0],
    [54, 156, 33, 38, 2, 202, 63, 77, 8, 147, 3, 115, 133, 15, 18, 5, 192, 11, 183, 21, 19, 5, 223, 29, 17, 162, 59, 52, 88, 17, 33, 22, 69, 95, 5, 44, 21, 4, 47, 6, 108, 13, 4, 238, 216, 92, 178, 125],
    68,
    158,
    46,
    326
  output: "8"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 393, 21, 0, 0, 0, 27, 0, 0, 48, 0, 0, 0, 353, 0, 393, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 310, 375, 272, 367, 368, 383, 141, 357, 0, 243, 0, 252, 0, 0, 0, 303, 184, 13, 0, 321, 386, 332, 380, 50],
    [0, 363, 102, 0, 0, 0, 366, 0, 0, 314, 0, 0, 0, 94, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 277, 299, 263, 152, 27, 313, 340, 301, 0, 374, 0, 248, 0, 0, 0, 108, 249, 378, 0, 41, 243, 203, 106, 300],
    [179, 281, 1, 32, 45, 52, 5, 76, 156, 27, 141, 113, 124, 5, 101, 41, 169, 83, 212, 243, 204, 184, 227, 237, 3, 2, 13, 186, 55, 26, 2, 45, 27, 6, 193, 6, 25, 15, 97, 15, 68, 3, 4, 39, 134, 36, 21, 15, 5, 45],
    102,
    7,
    186,
    110
  output: "11"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 873, 0, 0, 0, 762, 0, 0, 780, 727, 0, 301, 61, 0, 0, 0, 80, 0, 247, 0, 0, 0, 0, 0, 379, 894, 0, 347, 0, 0, 0, 194, 167, 839, 700, 644, 345, 0, 0, 0, 442, 378, 0, 526, 762, 222, 887, 0, 520, 733],
    [0, 468, 0, 0, 0, 88, 0, 0, 678, 476, 0, 366, 824, 0, 0, 0, 809, 0, 302, 0, 0, 0, 0, 0, 810, 306, 0, 237, 0, 0, 0, 345, 608, 513, 440, 296, 562, 0, 0, 0, 223, 151, 0, 751, 811, 739, 449, 0, 658, 343],
    [25, 437, 7, 32, 41, 24, 69, 77, 60, 141, 109, 26, 280, 132, 181, 154, 19, 176, 15, 12, 202, 219, 228, 236, 2, 89, 111, 11, 53, 91, 194, 142, 2, 20, 22, 12, 94, 129, 245, 144, 34, 5, 166, 9, 38, 89, 332, 84, 30, 5],
    232,
    48,
    833,
    650
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-4, 139, 874, 481, 0, -2, 680, 738, -3, -2, -3, -4, 678, -1, -4, -3, -2, -2, -4, -3, 0, 645, 710, -3, -4, 711, -3, 0, 659, -4, 592, 882, 230, 657, -2, 846, 457, 356, -2, 0, -2, 829, 0, 572, 193, 635, 673, 72, 515, 164],
    [-2, 6, 647, 123, -1, 0, 319, 88, 0, -1, 0, -4, 773, -3, -4, 0, -2, 0, -2, 0, -3, 439, 298, 0, -1, 694, -3, -3, 496, -3, 890, 415, 626, 660, 0, 579, 317, 526, -3, -4, -3, 896, -3, 598, 476, 627, 472, 827, 899, 151],
    [124, 9, 90, 1, 603, 86, 4, 2, 321, 364, 408, 443, 37, 921, 806, 205, 245, 49, 728, 764, 163, 9, 3, 528, 962, 27, 649, 561, 14, 487, 60, 3, 16, 5, 887, 6, 3, 3, 8, 847, 283, 50, 687, 10, 2, 2, 6, 1, 6, 13],
    713,
    852,
    36,
    496
  output: "12"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-3, -3, -4, -1, -2, 0, 777, -1, 0, 709, -3, 0, -3, -4, 420, -3, -3, 205, 760, 837, 18, 928, 984, 65, 203, 322, 398, 379, 936, 297, 497, 0, -2, 694, 591, 963, 996, 771, 543, 923, 499, 951, 560, -1, 293, 453, 258, 559],
    [-4, -2, -4, -2, -1, -3, 88, -4, -3, 946, -4, -2, -1, -2, 909, 0, -4, 653, 731, 699, 881, 161, 189, 855, 758, 977, 562, 675, 868, 802, 852, -2, -4, 734, 526, 363, 119, 598, 779, 677, 611, 828, 950, -3, 297, 527, 699, 612],
    [3, 525, 82, 126, 163, 443, 27, 285, 322, 31, 403, 203, 486, 47, 41, 248, 643, 12, 335, 247, 188, 5, 196, 88, 26, 30, 2, 44, 9, 6, 23, 562, 367, 54, 51, 16, 290, 42, 5, 87, 19, 28, 28, 601, 8, 3, 28, 36],
    494,
    937,
    135,
    300
  output: "8"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000],
    [1000, -1000],
    [1000, 1000],
    1000,
    997,
    -666,
    -666
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, -1000, 1000],
    [1000, -1000, 1000, -1000],
    [999, 999, 999, 999],
    1000,
    997,
    -666,
    -666
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, 1000, 753, -409, -595, -549, 708, -864, -682, 669, 752, 514, 557],
    [1000, 1000, -1000, 974, -739, 760, -59, 909, -107, -106, 183, 939, -922, -488],
    [999, 999, 999, 437, 147, 236, 3, 245, 13, 99, 41, 2, 461, 11],
    505,
    799,
    -737,
    -23
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, 1000, -553, -109, -257, -920, 966, 782, 934, 303, -910, 903, -911],
    [1000, 1000, -1000, 870, -318, 950, -777, -569, 288, -798, -458, 297, 997, -916],
    [999, 999, 999, 446, 241, 69, 284, 1, 225, 768, 38, 207, 399, 107],
    877,
    168,
    -889,
    -886
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, 1000, -553, -109, -257, -920, 966, 782, 934, 303, -910, 903, -911],
    [1000, 1000, -1000, 870, -318, 950, -777, -569, 288, -798, -458, 297, 997, -916],
    [999, 999, 999, 446, 241, 69, 284, 1, 225, 768, 38, 207, 399, 107],
    -911,
    -916,
    -666,
    -666
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, 1000, 926, -346, -875, -525, 369, -506, 426, 310, -84, 798, -993],
    [1000, 1000, -1000, 452, -545, -413, -526, -785, -487, -381, -977, 270, 442, 961],
    [999, 999, 999, 85, 387, 42, 21, 10, 158, 148, 79, 133, 396, 763],
    1000,
    997,
    -666,
    -666
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, -1000, 1000, 864, -899, 948, 965, -101, 986, -635, -282, 477, -975, -935, -359, 367, 497, -331, 823, 399, 660, 406, -578, -37, -911, 62, 798, -250, -514, 984, 415, -946, -601, -888, -494],
    [1000, -1000, 1000, -1000, -759, -260, -577, 839, 110, 938, -646, 549, 464, 266, -873, 307, 101, -688, 948, 995, -975, 557, -714, -53, 389, 521, -151, 263, -880, 582, 148, 842, -386, 667, -702, -297],
    [999, 999, 999, 999, 183, 202, 391, 317, 92, 6, 114, 68, 141, 115, 30, 4, 94, 52, 78, 56, 218, 57, 28, 12, 121, 501, 134, 129, 118, 28, 68, 208, 62, 47, 135, 2],
    776,
    -931,
    392,
    -848
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, -1000, 1000, -484, -851, 914, 982, -985, -34, -934, -974, -394, -991, 477, 813, -894, 242, -840, -78, 904, -159, -212, -811, 763, 548, -940, 827, -932, -519, 72, 899, -781, -591, 549, 522, -219, 70, 924, -447, 386, 369, -939, -733, 297, 723, -562, 947, -930, -698],
    [1000, -1000, 1000, -1000, 388, -664, 559, 928, 711, -184, -185, -455, 902, 820, -664, -250, -714, 571, -966, 143, -632, 321, 671, 304, 639, -796, 422, -133, 870, -315, 229, -511, 153, -826, 297, 0, 504, -264, 438, -9, 702, -6, -641, -190, -445, 884, 873, 421, 438, 703],
    [999, 999, 999, 999, 98, 443, 6, 653, 418, 234, 32, 154, 63, 159, 358, 38, 658, 80, 81, 85, 33, 71, 7, 4, 69, 119, 11, 55, 10, 16, 7, 6, 106, 55, 36, 90, 61, 22, 5, 9, 1, 28, 27, 42, 24, 125, 21, 132, 54, 18],
    891,
    502,
    -85,
    799
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1000, -1000, -1000, 1000, 594, 905, -726, -714, -340, 296, -915, -56, -195, -998, 792, -935, -264, 858, -67, 638, 743, -515, -954, -819, -685, -413, -475, 99, -767, 363, -379, 274, -329, 306, -363, 12, -219, 672, 163, 862, -309, 833, 459, -977, 646, -46, -345, -583, -218, -589],
    [1000, -1000, 1000, -1000, 17, -707, 769, 995, -348, 687, 387, 193, 307, -410, 174, 897, -894, 836, 385, 711, -615, 443, 712, 401, -137, -718, -707, -189, -946, -377, -35, 384, 845, 19, -413, -539, -42, -923, -187, -725, -708, -657, 287, -413, -718, -461, -435, -252, 573, -831],
    [999, 999, 999, 999, 33, 571, 34, 34, 14, 223, 167, 104, 49, 263, 142, 830, 62, 331, 13, 6, 231, 15, 499, 63, 25, 159, 42, 129, 166, 48, 8, 5, 134, 36, 27, 36, 175, 12, 24, 493, 16, 41, 60, 2, 76, 61, 57, 93, 1, 8],
    144,
    -144,
    -729,
    -615
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-466, 850, -481, 959, 156, 297, -544, -418, 45, 754, -729, 614, -282, -332, -156, 79, -677, 43, -255, -266, 795, 869, -49, 276, 713, 602, 485, -53, -5, 61, 898, 888, 483, 26, -439, -330, -750, -970, 75, -372, 338, -8, -193, -628, -752, 653, -764, -791, -174, 851],
    [-617, 988, -703, 99, 757, 297, -382, -423, -207, 57, 293, 701, 962, 860, -996, -381, 670, -622, 838, -499, -732, -270, -891, -238, -688, 772, -131, -142, -339, -215, 103, 376, 768, 83, 436, 920, -412, -141, 424, 938, -687, 950, -887, -226, 139, -657, -459, 787, 794, -306],
    [714, 111, 830, 260, 55, 166, 365, 90, 30, 44, 9, 190, 363, 608, 74, 14, 87, 131, 199, 24, 344, 104, 11, 23, 196, 15, 110, 72, 46, 8, 42, 19, 38, 12, 89, 690, 30, 17, 10, 39, 3, 20, 4, 77, 21, 66, 98, 13, 78, 51],
    -742,
    -443,
    -448,
    856
  output: "8"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-38, -2, 40, -91, 74, 69, -69, -38, 57, 83, -93, -72, -36, -64, 88, 86, 11, 1, -88, 68, -71, 18, 67, -78, 57, -99, -10, 16, -57, 56, -17, -58, -40, 73, -79, 21, 11, 10, -98, -70, 9, -1, -38, 87, -94, 91, 90],
    [41, -8, -46, 60, -69, 50, -81, -97, 32, -64, 82, 17, 76, -93, -69, -72, 97, -11, -81, 76, 41, -13, -68, 73, 68, 30, -40, 82, -54, 92, -30, -67, 99, -66, -48, 33, -4, 48, 2, -81, -23, -67, -49, -17, -77, 68, -64],
    [18, 28, 5, 77, 34, 45, 55, 19, 21, 22, 43, 20, 8, 5, 64, 74, 23, 6, 7, 5, 3, 5, 42, 18, 4, 7, 4, 7, 8, 1, 1, 3, 6, 3, 5, 2, 6, 9, 7, 1, 3, 11, 8, 8, 20, 6, 14],
    93,
    -68,
    -78,
    -78
  output: "8"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-260, -790, -788, -670, -668, 13, -663, -721, -464, -769, -371, -184, -152, -643, -454, -351, -788, -666, -787, -439, -660, -661, -758, -728, -654, -446, -575, -726, -364, -664, -659, -788, 74, -659, 42, -570, -662, -359, -765],
    [-664, 474, 619, 552, 556, 363, 576, 718, 497, 738, 885, -582, -351, 782, 498, 891, 478, 556, 622, 507, 572, 577, 640, 700, 573, 511, 624, 720, 896, 560, 573, 492, 400, 577, 386, 628, 578, 897, 798],
    [553, 398, 249, 73, 68, 247, 26, 38, 51, 95, 75, 394, 96, 25, 40, 53, 393, 56, 244, 22, 38, 21, 208, 16, 12, 13, 24, 48, 30, 51, 36, 378, 174, 31, 124, 17, 23, 20, 31],
    -658,
    575,
    -783,
    619
  output: "11"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-526, -508, -501, -479, -473, 779, -503, -503, -315, -491, -475, 784, -470, -332, -484, -375, -469, -493, -468, -371, -419, -482, -373, 947, -472, -449, -468, -100],
    [-399, -396, -273, -389, -319, 279, -384, -386, -265, -269, -210, 353, -203, -264, -213, -370, -384, -265, -383, -201, -255, -211, -369, 334, -205, -199, -383, -751],
    [340, 312, 125, 261, 45, 327, 290, 286, 46, 114, 51, 249, 40, 12, 22, 31, 242, 109, 245, 12, 16, 19, 27, 76, 44, 14, 240, 139],
    -472,
    -382,
    -447,
    -195
  output: "6"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-274, 504, -111, 511, -217, 43, -236, 32, 156, 715, 157, 45, 423, 157, 170, 718, 660, 157, 168, 687, 115, 553, -271, -24, 720, 735, 676, 567, 724, 167, 468, 515, 721, 663, 726, 722, -254, 512, -234, 505, -168],
    [231, -320, 425, -305, 294, 309, 298, 683, 614, 304, 618, 684, -606, 618, 625, 304, -614, 618, 627, -610, 440, -296, 234, 783, 305, 307, -600, -286, 310, 627, -576, -312, 306, -611, 306, 307, 241, -240, 299, -319, 317],
    [826, 121, 447, 94, 655, 225, 694, 71, 48, 48, 43, 55, 145, 40, 25, 44, 70, 41, 18, 17, 70, 42, 819, 24, 40, 15, 38, 17, 32, 21, 79, 105, 38, 62, 27, 36, 800, 13, 690, 119, 583],
    663,
    -616,
    734,
    304
  output: "11"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [531, -413, 834, 861, 871, 861, 873, 835, 879, 887, 887, 889, 875, 884, 884, 876, 605, 875, 865, -696, 874, -317, -279, 835, -412, 877, -839, 875, 876, 887, 849, 875, 835, 877, 887, -296, 888, -683, -344, -262, -746],
    [-116, -1, 0, 529, 547, 529, 555, 2, 562, 560, 578, 578, 549, 567, 569, 560, -68, 549, 530, 732, 561, 46, -638, 6, 2, 560, -606, 549, 559, 579, 34, 550, 6, 560, 577, 45, 577, 749, 28, -619, -578],
    [541, 301, 67, 113, 86, 112, 71, 64, 53, 44, 22, 17, 81, 36, 33, 59, 363, 80, 106, 108, 62, 174, 205, 59, 296, 56, 282, 79, 65, 12, 14, 77, 58, 57, 20, 75, 24, 58, 207, 151, 28],
    604,
    -66,
    -292,
    47
  output: "7"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-750, -338, -213, -746, -730, -722, -725, -713, -737, -697, -543, -740, -677, 85, -694, -715, -693, -676, -734, -724, -262, -670, -696, -689, -670, -723, -691, -734, -548, -669, -571, -705, -686, -211, -667, -678, -723, -672, -745, -746, -641, -726, -711, -695, -674, -669, -573, -713],
    [99, -862, 51, 162, 165, 185, 167, 191, 170, 199, 288, 174, 195, 687, 202, 186, 202, 198, 168, 169, -736, 206, 203, 200, 203, 172, 207, 171, 347, 204, 185, 194, 202, 51, 205, -740, 171, 203, 124, 103, -717, 173, 191, 201, 200, 203, -692, 189],
    [302, 718, 24, 226, 193, 123, 177, 106, 209, 85, 12, 145, 41, 441, 79, 113, 77, 37, 199, 171, 123, 26, 72, 57, 13, 166, 65, 203, 11, 22, 12, 96, 53, 21, 18, 171, 168, 30, 273, 295, 92, 184, 103, 82, 34, 11, 13, 109],
    -726,
    165,
    -681,
    -737
  output: "30"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-725, -715, -543, -695, -723, -213, -689, -750, -548, 85, -745, -262, -669, -697, -641, -674, -686, -338, -724, -672, -730, -677, -740, -694, -667, -678, -734, -723, -746, -211, -746, -722, -670, -693, -670, -676, -705, -571, -696, -691, -726, -713, -711, -734, -737, -669, -573, -713],
    [167, 186, 288, 201, 172, 51, 200, 99, 347, 687, 124, -736, 204, 199, -717, 200, 202, -862, 169, 203, 165, 195, 174, 202, 205, -740, 171, 171, 162, 51, 103, 185, 206, 202, 203, 198, 194, 185, 203, 207, 173, 191, 191, 168, 170, 203, -692, 189],
    [177, 113, 12, 82, 166, 24, 57, 302, 11, 441, 273, 123, 22, 85, 92, 34, 53, 718, 171, 30, 193, 41, 145, 79, 18, 171, 203, 168, 226, 21, 295, 123, 26, 77, 13, 37, 96, 12, 72, 65, 184, 106, 103, 199, 209, 11, 13, 109],
    -567,
    185,
    -729,
    175
  output: "16"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-433, 618, 442, -430, -308, -389, -412, 163, -417, -439, 682, -329, 112, 461, -442, -339, -321, 621, 165, -423, 620, -341, -338, -421, -316, -426, 383, 646, 623, -407, 111, 379, 121, -331, 378, -332],
    [418, -539, 334, 413, 445, 417, 438, -119, 420, 409, -498, 425, -217, 344, 408, 422, 426, -533, -102, 419, -528, 420, 425, 672, 440, 668, 427, -509, -524, 425, -218, 334, -214, 425, 332, 424],
    [393, 198, 66, 333, 35, 226, 281, 189, 192, 405, 18, 80, 341, 27, 410, 97, 60, 115, 151, 319, 170, 100, 93, 16, 45, 23, 32, 65, 146, 300, 348, 141, 330, 85, 145, 72],
    -327,
    427,
    437,
    331
  output: "21"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [36, -535, 51, 190, 156, 281, -526, 242, -554, -677, -536, 234, -552, -530, -613, 184, 263, 148, 224, 69, -601, 36, 148, 43, -475, 46, -564, 353, 263, 180, 178, -615, -537, 265, -695, 268, 192, -559, -539, 236],
    [-465, 118, -448, -378, -415, -441, 161, -225, 102, -676, 119, -241, 103, 158, 99, -397, -331, -445, -252, -321, 111, -421, -446, 642, 141, -455, 97, -341, -330, -408, -411, 96, 119, -396, -717, -330, -375, 104, 115, -230],
    [483, 88, 397, 196, 256, 81, 31, 11, 125, 18, 98, 47, 122, 40, 195, 216, 22, 291, 64, 35, 213, 429, 293, 439, 17, 466, 142, 21, 20, 228, 233, 234, 91, 17, 77, 11, 192, 132, 104, 28],
    -477,
    141,
    -555,
    98
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-478, 624, 502, 615, 528, 500, 499, -665, -579, 552, 652, 380, 625, 628, 617, 629, 447, 457, 503, 526, 617, -568, 455, 525, -552, 613, 550, 503, -437, 447, 630],
    [-307, -299, -183, -308, -120, -140, -165, -370, -412, -157, 672, -327, -297, -299, -307, -298, -304, -284, -164, -123, -306, -396, -284, -123, -333, -313, -158, -164, -354, -285, -298],
    [125, 28, 28, 48, 18, 15, 77, 354, 614, 20, 583, 296, 11, 22, 39, 20, 68, 30, 72, 13, 43, 571, 23, 11, 482, 57, 14, 70, 14, 46, 17],
    625,
    -296,
    -666,
    -368
  output: "14"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [60, 62, 211, 67, 63, 58, -68, 38, -458, 205, -101, -89, 227, -468, 40, -162, -96, -463, 68, -465],
    [269, 264, 286, 276, 257, 256, 215, 240, -121, 420, 118, 142, 118, -132, 241, -397, 126, -127, 278, -129],
    [39, 102, 15, 78, 115, 122, 271, 157, 28, 21, 384, 348, 21, 50, 149, 80, 373, 42, 53, 45],
    -166,
    -394,
    -463,
    -124
  output: "5"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [490, -394, -403, -243, -393, -276, -383, -390, -381, -518, -383, -283, -605, 492, -274, 491, 364, 489, 490, -384, 495, -388, -376, -277, -390, 419, -396],
    [20, 552, 481, 581, 481, 523, 552, -30, 555, 184, -26, 522, 165, 19, 527, 20, -176, 17, 17, 567, 24, 554, 483, 526, 552, -152, 481],
    [82, 70, 175, 11, 162, 29, 12, 99, 20, 496, 87, 43, 135, 66, 20, 73, 408, 92, 88, 38, 46, 54, 144, 34, 61, 287, 166],
    491,
    24,
    -379,
    -26
  output: "11"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-651, -643, -648, 556, -608, -641, -610, -628, 192, -637, 67, 488, -635, 53, -528, 351, -73, -603, -385, 341, 562, 204, -607, -605, 71, -428, -629, -658, -606],
    [-162, -217, -219, 533, -178, -170, -179, -114, 486, -117, 489, 508, -213, 457, -84, 285, -215, -202, 40, 271, 535, 501, -177, -205, 490, -163, -115, -202, -174],
    [90, 314, 320, 45, 234, 187, 237, 25, 562, 40, 41, 157, 303, 89, 15, 44, 158, 264, 39, 63, 33, 520, 232, 268, 32, 22, 27, 145, 226],
    -606,
    -179,
    347,
    283
  output: "16"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-223, -247, -384, -157, -329, -152, -397, -251, -239, -255, -396, 220, 290, -317, -332, -259, -254, -333, 364, -380, -248, -244, -380, 295, -223, -5, 303, -174, 301, -248, -228, 93, -247, -251, 32, -370, -6, 27, -248, -197, -276, 290, 276, -326, -204, -362, -249, -254, 38],
    [127, 202, 0, 358, 49, 359, -7, 203, 135, 193, -5, 526, -653, 114, 46, 177, 194, 45, -622, 22, 203, 198, 16, -649, 143, 153, -644, 206, -641, 202, 182, 356, 196, 199, 156, 55, 152, 155, 203, 151, 132, -643, -682, 60, 241, 59, 203, 191, 178],
    [376, 30, 720, 58, 594, 51, 748, 41, 345, 123, 744, 15, 96, 517, 600, 142, 120, 602, 13, 688, 35, 12, 703, 42, 411, 90, 79, 17, 21, 32, 85, 14, 23, 114, 46, 652, 92, 56, 34, 288, 468, 62, 131, 577, 13, 643, 37, 57, 14],
    -391,
    -2,
    364,
    -626
  output: "21"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-18, -231, -13, -21, -170, 1, 242, -102, -160, -196, 2, 240, 49, 245, -208, 219, 3, -69, -108, -24, -130, 29, -220, -186, -470, 388, -108, -119, -132, -5, -127, -230, -195, -107, 79, -188, -108, 401, -498, 203, -224, 171, -174, -128, -49, -109, -7, 421, -106],
    [602, 375, 585, 595, 366, 608, -621, 681, 414, 300, 621, -683, 761, 838, 400, 486, 623, 593, 680, 593, 578, 618, 571, 361, -684, 595, 678, 590, 576, 603, 583, 375, 300, 684, 423, 359, 586, 514, -693, 486, 375, 606, 367, 581, 693, 677, 601, 948, 685],
    [64, 598, 12, 74, 716, 41, 32, 22, 468, 799, 11, 107, 17, 34, 535, 28, 14, 131, 30, 79, 201, 11, 295, 733, 86, 28, 34, 183, 204, 49, 194, 596, 797, 13, 19, 736, 171, 15, 125, 71, 585, 51, 678, 197, 24, 36, 52, 65, 11],
    249,
    833,
    240,
    838
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, -3, 2, 5, -4, 12, 12],
    [1, -1, 2, 5, 5, 1, 1],
    [8, 1, 2, 1, 1, 1, 2],
    -5,
    1,
    12,
    1
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 5],
    [0, 5],
    [20, 1],
    0,
    0,
    5,
    5
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    25,
    25,
    30,
    30
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-107, -38, 140, 148, -198, 172, -179, 148, 176, 153, -56, -187],
    [175, -115, 23, -2, -49, -151, -52, 42, 0, 68, 109, -174],
    [135, 42, 70, 39, 89, 39, 43, 150, 10, 120, 16, 8],
    102,
    16,
    19,
    -108
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -6, 6],
    [0, 1, 2],
    [2, 2, 2],
    -5,
    1,
    5,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    0,
    0,
    0,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [2],
    [0],
    [100],
    0,
    0,
    4,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 3],
    [0, 0, 0],
    [1, 10, 1],
    0,
    0,
    3,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    0,
    1,
    0,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [2, 6],
    0,
    0,
    0,
    3
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -1, 2],
    [0, 1, 1],
    [10, 1, 1],
    -1,
    1,
    2,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, -3, 2, 5, -4, 12, 12, 0],
    [1, -1, 2, 5, 5, 1, 1, 0],
    [8, 1, 2, 1, 1, 1, 2, 1000],
    -5,
    1,
    12,
    1
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    1,
    1,
    2,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -6, 6],
    [0, 1, 2],
    [2, 2, 2],
    5,
    1,
    5,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [10, 15],
    1,
    1,
    2,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [3],
    [3],
    [3],
    2,
    3,
    4,
    3
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [5, 10],
    0,
    0,
    4,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    -1,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -10, 10],
    [0, 0, 0],
    [100, 5, 5],
    -10,
    0,
    10,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [2, 4],
    1,
    0,
    3,
    0
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    -5,
    0,
    5,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0],
    [0, 0, 0],
    [5, 10, 15],
    0,
    0,
    11,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    0,
    0,
    1,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    0,
    1,
    0,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 999, 0, -12, 0, 500, -12],
    [0, 999, 0, 0, 300, 31, 0],
    [599, 10, 998, 50, 33, 2, 47],
    -61,
    1,
    499,
    30
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -2, -2],
    [0, 2, -2],
    [100, 1, 1],
    -2,
    -2,
    1,
    1
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, -3, 2, 5, -4, 12, 12],
    [1, -1, 2, 5, 5, 1, 1],
    [8, 1, 2, 1, 1, 1, 2],
    -5,
    1,
    1,
    1
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [200],
    0,
    1,
    0,
    -1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 1],
    [0, 1],
    [2, 800],
    -5,
    1,
    5,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    1,
    1,
    2,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    0,
    1,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-107, -38, 140, 148, -198, 172, -179, 148, 176, 153, -56, -187, 0],
    [175, -115, 23, -2, -49, -151, -52, 42, 0, 68, 109, -174, 0],
    [135, 42, 70, 39, 89, 39, 43, 150, 10, 120, 16, 8, 1000],
    102,
    16,
    19,
    -108
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [50],
    1,
    1,
    2,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [4, 5],
    0,
    0,
    0,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 5, -5],
    [0, 0, 0],
    [20, 1, 1],
    5,
    0,
    -5,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    3,
    0,
    4,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 15, 15, 7, 7, 7, 0, 0],
    [0, 0, 0, 0, 0, 9, -9, 0, 0],
    [1, 2, 1, 2, 4, 4, 4, 200, 1000],
    0,
    0,
    15,
    0
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    -1,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -6, 6, 0],
    [0, 1, 2, 0],
    [2, 2, 2, 100],
    -5,
    1,
    5,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1],
    [1],
    [100],
    1,
    1,
    1,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [8, 6, 3],
    [3, 5, 8],
    [5, 100, 1000],
    12,
    16,
    100,
    100
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [2],
    -1,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0],
    [0, 0, 0],
    [2, 4, 10],
    0,
    0,
    0,
    5
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    1,
    1,
    5,
    5
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [2, 2, 2, 15],
    [2, 2, 2, 2],
    [1, 10, 50, 1],
    2,
    2,
    15,
    2
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 1, 2],
    [0, 0, 0],
    [5, 3, 1],
    0,
    0,
    2,
    0
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    1,
    1,
    -1,
    -1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [1, 3],
    0,
    0,
    0,
    2
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0],
    [0, 0, 10, -10],
    [1000, 500, 2, 2],
    0,
    9,
    0,
    -9
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49],
    -28,
    0,
    12,
    0
  output: "8"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    1,
    1,
    1,
    -1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [2, 3, 4, 5],
    -1,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [2],
    0,
    0,
    1,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, 1, 1, 4],
    [1, 1, 1, 1],
    [100, 5, 1, 1],
    4,
    1,
    1,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-3, 2, 2, 0, -4, 12, 12, 12],
    [-1, 2, 3, 1, 5, 1, 1, 1],
    [1, 3, 1, 7, 1, 1, 2, 3],
    2,
    3,
    2,
    3
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [2],
    1,
    0,
    -1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [2, 10],
    1,
    1,
    3,
    3
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [10, 100],
    0,
    0,
    50,
    0
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 6, 3, 3],
    [0, 0, 0, 0],
    [2, 2, 10, 25],
    0,
    0,
    6,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [10, 9],
    1,
    -1,
    1,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [2],
    [2],
    [2],
    1,
    2,
    3,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0],
    [0, 0, 0],
    [4, 6, 8],
    -1,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [5, 10],
    0,
    0,
    1,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [4],
    1,
    0,
    0,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    0,
    0,
    1,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    0,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    1,
    1,
    2,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [1000],
    -1,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [10, 1000],
    1,
    1,
    50,
    50
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74],
    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    0,
    0,
    74,
    74
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, 1, 1, 4],
    [1, 1, 1, 1],
    [10, 5, 1, 1],
    1,
    1,
    4,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    1,
    1,
    0,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, -6, -2, 2],
    [0, 0, 0, 0, 0, 0],
    [99, 98, 97, 6, 1, 1],
    -2,
    0,
    2,
    0
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    1,
    1,
    2,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    1,
    0,
    0,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, 2],
    [0, 0],
    [2, 15],
    0,
    0,
    5,
    0
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -2, 2],
    [0, 0, 0],
    [10, 1, 1],
    -2,
    0,
    2,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [5, 10],
    0,
    0,
    1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [1, 2],
    0,
    0,
    0,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [2, 5],
    1,
    0,
    3,
    0
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [1000],
    2,
    2,
    -2,
    -2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [10, 11, 12, 13],
    0,
    0,
    2,
    2
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-3, 2, 2, 0, -4, 12, 12, 12],
    [-1, 2, 3, 1, 5, 1, 1, 1],
    [1, 3, 1, 7, 1, 1, 2, 3],
    2,
    3,
    -3,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-1000, -1],
    [1000, 1],
    [1000, 1],
    -1000,
    1000,
    -1,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [999],
    5,
    5,
    15,
    15
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, 4, 1],
    [1, 1, 1],
    [1, 1, 10],
    1,
    1,
    4,
    1
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1],
    [1],
    [2],
    1,
    1,
    1,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 2, 4],
    [0, 0, 0],
    [1, 4, 1],
    0,
    0,
    4,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [2],
    [0],
    [10],
    3,
    0,
    -5,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [100],
    99,
    99,
    101,
    101
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    0,
    0,
    1,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 10],
    [0, 0],
    [100, 5],
    0,
    0,
    10,
    0
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 3, 1, 1],
    [0, 0, 0, 0],
    [1, 1, 5, 10],
    0,
    0,
    3,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    1,
    1,
    2,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [999, 2],
    -5,
    1,
    5,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 3, -3],
    [0, 3, -3],
    [10, 1, 1],
    3,
    3,
    -3,
    -3
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0],
    [0, 0, 0],
    [10, 5, 2],
    0,
    0,
    7,
    7
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, -3, 3, 3],
    [0, 0, 0, 0],
    [6, 1, 1, 2],
    -3,
    0,
    3,
    0
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [4],
    -2,
    0,
    2,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [2, -1, 0],
    [0, 0, 0],
    [1, 1, 10],
    -1,
    0,
    2,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-3, 2, 2, 0, -4, 12, 12, 12, 12],
    [-1, 2, 3, 1, 5, 1, 1, 1, 12],
    [1, 3, 1, 7, 1, 1, 2, 3, 50],
    2,
    3,
    13,
    2
  output: "5"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [4],
    3,
    3,
    10,
    10
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 2, -2],
    [0, 0, 0, 0],
    [100, 10, 1, 1],
    -2,
    0,
    2,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [20],
    19,
    19,
    25,
    25
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    0,
    0,
    4,
    -4
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [100, 50, 25, 15, 5],
    40,
    40,
    3,
    3
  output: "4"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 1],
    [0, 1],
    [1000, 10],
    100,
    100,
    1,
    1
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    1,
    1,
    -1,
    -1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [2, 2, 11, 11, 7],
    [1, 1, 1, 1, 2],
    [1, 4, 1, 4, 100],
    4,
    1,
    11,
    3
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [10, 0, 5, 10, 5],
    [0, 0, 0, 0, 0],
    [4, 2, 20, 2, 100],
    0,
    1,
    10,
    0
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0],
    [0, 0],
    [10, 20],
    1,
    0,
    -1,
    0
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0],
    [0, -1, 2],
    [4, 1, 1],
    0,
    -1,
    0,
    2
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 10, 0],
    [0, 0, 0],
    [2, 2, 100],
    0,
    0,
    10,
    0
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [5, 3, 7],
    [5, 5, 5],
    [5, 1, 2],
    3,
    5,
    7,
    5
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [-3, 2, 2, 0, -4, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0],
    [-1, 2, 3, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 1, 7, 1, 1, 2, 3, 50, 51, 52, 53, 54, 55, 56, 57],
    2,
    3,
    13,
    2
  output: "5"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 1000],
    [0, 1000],
    [100, 1],
    99,
    99,
    1000,
    1000
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 2, -2],
    [0, 2, -2],
    [100, 1, 1],
    2,
    2,
    -2,
    -2
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
    [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
    [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47],
    101,
    101,
    1,
    1
  output: "48"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [400],
    399,
    399,
    399,
    401
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [10],
    -9,
    9,
    0,
    0
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [5],
    0,
    0,
    0,
    1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0],
    [0],
    [2],
    1,
    2,
    1,
    1
  output: "1"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [10, 9, 8, 7, 6, 5],
    1,
    1,
    -1,
    -1
  output: "0"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 20, -20],
    [0, 20, -20],
    [1000, 10, 10],
    20,
    20,
    -20,
    -20
  output: "2"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [0, 0, 0, 0],
    [0, 7, 6, -6],
    [10, 1, 3, 2],
    0,
    7,
    0,
    -6
  output: "3"
  reason: ""
- !ruby/object:TopCoder::Case 
  input: |-
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 2, 3, 4, 5],
    1,
    1,
    1,
    1
  output: "0"
  reason: ""
url: http://www.topcoder.com/tc?module=ProblemDetail&rd=13751&pm=10297
