{"name":"Gettc","tagline":"Download TopCoder problem and generate a skeleton solution","body":"Download a [TopCoder](http://topcoder.com/tc) problem, parse the examples and system tests, then finally generate a basic template for C++, Haskell, and Java. You write the function definition and the generated template will take care of running it against input and output files.\r\n\r\nTopCoder is a heaven for programmers. Solving algorithmic problems is a great way to embrace the passion for programming. There are problems for all levels. A strong academic background is not required to enjoy it. If you like Project Euler, you will probably love TopCoder.\r\n\r\nHowever, you normally have to paste the solution into TopCoder's online arena where it will be checked for correctness. Even then the online arena only supports C++, Java, and C#.\r\n\r\n# Get started\r\n\r\nThe following packages are hard dependencies. They are required no matter what language you plan to use gettc for.\r\n\r\n- [Ruby](http://www.ruby-lang.org/en/downloads/): The [Ruby installer](http://rubyinstaller.org/) is recommend for Windows users. \r\n- [RubyGems](http://rubygems.org/pages/download): Many Ruby installations already bundle RubyGems.\r\n- The standard GCC toolset: Most Unix systems have it bundled. Windows users may use [MinGW](http://www.mingw.org).\r\n\r\n## Installation \r\n\r\n    $ git clone git://github.com/seri/gettc.git\r\n    $ cd gettc\r\n    $ rake gem\r\n    $ gem install pkg/gettc-1.2\r\n\r\n    The newest version of bluecloth, which gettc depends on, is reported to have\r\n    problems compiling on Windows under MinGW. You may manually install an older\r\n    version before running `gem install pkg/gettc-1.2`:\r\n        $ gem install bluecloth -v2.0.7\r\n\r\n## Try out\r\n\r\nNow try running it for the first time:\r\n\r\n    $ cd ~/download\r\n    $ gettc 11290\r\n\r\n11290 is the problem ID for [this problem in TopCoder](http://www.topcoder.com/stat?c=problem_statement&pm=11290&rd=14537) (login is required). The ID is encoded in the URL. If gettc has been installed correctly, the previous command should output:\r\n\r\n     You have given ID = 11290\r\n     Downloading problem to raw HTML ... Done\r\n     Parsing problem from raw HTML ... Done\r\n     Generating problem diectory for PickAndDelete ... Done\r\n\r\nNow a directory called PickAndDelete was generated with the following content:\r\n\r\n    PickAndDelete\r\n    `-- bin\r\n        `-- runner.sh\r\n    `-- data\r\n        `-- demo\r\n            `-- 0.in\r\n            `-- 0.out\r\n            `-- 1.in\r\n            `-- 1.out\r\n            ...\r\n        `-- sys\r\n            `-- 0.in\r\n            `-- 0.out\r\n            `-- 1.in\r\n            `-- 1.out\r\n            ...\r\n    `-- prob\r\n        `-- PickAndDelete.html\r\n        `-- PickAndDelete.md\r\n    `-- solve\r\n        `-- cpp\r\n            `-- Makefile\r\n            `-- PickAndDelete.cpp\r\n            `-- PickAndDeleteRunner.cpp\r\n            `-- PickAndDeleteTest.cpp\r\n        `-- haskell\r\n            `-- Makefile\r\n            `-- PickAndDelete.hs\r\n            `-- PickAndDeleteRunner.hs\r\n            `-- PickAndDeleteTest.hs\r\n        `-- java\r\n            `-- build.xml\r\n            `-- PickAndDelete.java\r\n            `-- PickAndDeleteRunner.java\r\n            `-- PickAndDeleteTest.java\r\n    `-- util\r\n        `-- check\r\n            `-- check.cpp\r\n            `-- Makefile\r\n\r\nDon't get upset by the number of generated files. It's possible to tweak the template so that less files are generated next time.\r\n\r\n# Usage\r\n\r\nSuppose C++ is your language of choice. The standard process of solving a problem called *PickAndDelete* will be like:\r\n\r\n    $ cd PickAndDelete/solve/cpp\r\n    $ vim PickAndDelete.cpp\r\n\r\nWrite some code and then:\r\n\r\n    $ make\r\n\r\nThe output will look something like:\r\n\r\n    Check 0 ... Time: 0.01s - Memory: 2036K\r\n    Failed\r\n    Input: <[\"1 2\"]>\r\n    Expected: <3>\r\n    Received: <0>\r\n    Check 1 ... Time: 0.00s - Memory: 2044K\r\n    Failed\r\n    Input: <[\"2 2 2 2 2 2 2 2 2\"]>\r\n    Expected: <512>\r\n    Received: <0>\r\n    Check 2 ... Time: 0.00s - Memory: 2048K\r\n    Failed\r\n    Input: <[\"5\", \" 1 \", \"2\"]>\r\n    Expected: <34>\r\n    Received: <0>\r\n    Check 3 ... Time: 0.00s - Memory: 2060K\r\n    Failed\r\n    Input: <[\"3 \", \"14159 265\", \"3589 7\", \" 932\"]>\r\n    Expected: <353127147>\r\n    Received: <0>\r\n    4 cases checked, 4 failed\r\n    Failed cases: 0 1 2 3\r\n\r\nThe default action of *make* is to run against the examples given in problem statement. In order to challange system tests, type:\r\n\r\n    $ make sys\r\n\r\nThe output should be:\r\n\r\n    57 cases checked, 57 failed, 0 errored\r\n    Failed cases: 0 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 47 48 49 5 50 51 52 53 54 55 56 6 7 8 9\r\n\r\nThis process is the same for all languages that gettc supports. Below are some specific deteails for each language.\r\n\r\n#### C++\r\n\r\nThe [Boost](http://www.boost.org/) library is required if you wish to apply TDD:\r\n\r\n    $ make test\r\n\r\nIf you don't write tests, there is no need to install Boost.\r\n\r\n#### Haskell\r\n\r\nBesides GHC, [Cabal](http://www.haskell.org/cabal/download.html) is required. But it could have been bundled by your Haskell installer. Now:\r\n\r\n    $ sudo cabal update\r\n    $ sudo cabal install parsec\r\n\r\nHUnit is required if you wish to apply TDD:\r\n\r\n    $ sudo cabal install HUnit\r\n\r\nIf you don't write tests, there is no need to install HUnit.\r\n\r\n#### Java\r\n\r\nBesides JDK, [Apache Ant](http://ant.apache.org/) is required. This should come as no surprise to most Java programmers.\r\n\r\nIn Java, you use *ant* instead of *make*. So:\r\n\r\n    $ ant\r\n\r\nWill run against the examples. And:\r\n\r\n    $ ant sys\r\n\r\nWill run against the system tests.\r\n\r\n[JUnit](https://github.com/KentBeck/junit/downloads) is required if you wish to run unit tests. Don't use the beta versions. Download one of the stable jar archives and put the jar into Ant's lib dir. \r\n\r\n# Further information\r\n\r\n## FAQ\r\n\r\n#### I only use Java\r\n\r\n    $ cd ~/.gettc/template/solve\r\n    $ rm -rf haskell cpp\r\n\r\nIf you want them back, copy from the project's Gem directory.\r\n\r\n#### I want to see input/output for the failed cases in system tests\r\n\r\n    $ make sysv\r\n\r\n#### I never write unit tests\r\n\r\n    $ cd ~/.gettc/template/solve/\r\n    $ rm {cpp,haskell,java}/*Test.*\r\n\r\n#### The output of make is too verbose\r\n   \r\nUse *make --quiet* instead. Here is what I do in my bashrc:\r\n\r\n    alias mk=`make --quiet`\r\n\r\n#### But I use C&#35;\r\n\r\nYou may email me to request support for your favourite language. I don't promise it will get delivered, but I'll see what I can do. \r\n\r\nI would appreciate if you roll your own, too. First refer to gettc/plugins to see what I did for the supported languages. There are a few things you need to do:\r\n\r\n- Write a generic parser that parses the generated input files into variables.\r\n- Write an engine in Ruby that acts a helper to generate code.\r\n- Write the template files in ERuby.\r\n\r\nAs what happens in gettc's generator is:\r\n\r\n- It will automatically require ~/.gettc/include/*/engine.rb.\r\n- It will walk through ~/.gettc/template, read each file as an ERuby template, and copy to the target directory.\r\n\r\nOnce you have done the hard work, please make a fork or something for other people to use.\r\n\r\n#### How do I uninstall?\r\n\r\n    $ sudo gem uni gettc\r\n    $ rm -rf ~/.gettc\r\n\r\nBesides getting rid of gettc, you may also want to do this to get a clean upgrade.\r\n\r\n#### Wrong username or password when trying to download\r\n\r\n- You should provide your own username/password in ~/.gettc/config.yml\r\n- If this doesn't work, try grabbing the latest version\r\n- If that still doesn't work, make an issue or email me\r\n\r\n## Tips\r\n\r\n- You may `rm -rf build` after you're done solving to save some disk space.\r\n\r\n## Known Issues\r\n\r\n#### Ambiguous function names\r\n\r\nSometimes the solution method has the same name with a standard library function, such as *filter*. In this case, you'll have to manually change the function name to something else in the runner and solution files.\r\n\r\n#### String parsing error\r\n\r\n TopCoder allows a string to be like \"This is\" one string\", while gettc gets confused with the quote character in between. If your solution fails only under this situation, it's probably correct.\r\n\r\n## Future plans\r\n\r\n- Support for more interesting languages (Golang is on the way)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}