{"name":"gettc","tagline":"TopCoder offline arena supporting multiple languages ","body":"# Fix is underway\r\n\r\nRecently, TopCoder has changed their authentication mechanism to OAuth, and the\r\ncurrent code is no longer able to download anything. I have got a solution, but\r\nhave not quite gotten the time to wrap up. I plan to publish the new bugfix\r\nversion at some point toward the end of January, 2016.\r\n\r\n# Introduction\r\n\r\nDownload a [TopCoder](http://community.topcoder.com/tc?module=MatchList) problem,\r\nparse the examples and system tests, then finally generate a naive solution for\r\nthe following languages:\r\n\r\n- C++\r\n- Haskell\r\n- Java\r\n- Python 3\r\n- Go\r\n- Ruby\r\n- Javascript\r\n\r\nAnd support for more languages is just around the corner.\r\n\r\n> You can email me to request support for your favourite language. I will\r\n> prioritize development on the most requested ones.\r\n\r\nYou write the function definition and the generated solution will take care of\r\nrunning it against the downloaded input and output files.\r\n\r\nTopCoder is a heaven for programmers. Solving algorithmic problems is a great\r\nway to embrace the passion for programming. There are problems for all levels.\r\nA strong academic background is not required to enjoy it. If you like Project\r\nEuler, you will probably love TopCoder.\r\n\r\nHowever, the TopCoder online arena is quite inconvenient and supports only a\r\nfew languages. Gettc's goal is to make the practice of solving algorithmic\r\nproblems convenient and fun, and in your desired language.\r\n\r\n# At a glance\r\n\r\n    $ [sudo] gem install gettc\r\n    $ gettc 11127\r\n\r\nNote that 11127 is the ID that TopCoder gives to the problem named `DigitHoles`. You\r\ncan find the ID for any problem if you look at the URL for\r\n[that problem's statement](http://community.topcoder.com/stat?c=problem_statement&pm=11127)\r\n(you need to have a TopCoder account). Output:\r\n\r\n    You have given ID = 11127\r\n    Downloading problem to raw HTML ... Done\r\n    Parsing problem from raw HTML ... Done\r\n    Generating problem directory for DigitHoles ... Done\r\n\r\nNow:\r\n\r\n    $ cd DigitHoles/solve/cpp\r\n    $ make demo\r\n\r\nOutput:\r\n\r\n    [gettc] Compile solver\r\n    [gettc] Compile checker\r\n    [gettc] Run test cases\r\n    Case 0 ... 2ms Failed\r\n        Input: <42>\r\n        Expected: <1>\r\n        Received: <0>\r\n    Case 1 ... 1ms Failed\r\n        Input: <669>\r\n        Expected: <3>\r\n        Received: <0>\r\n    Case 2 ... 1ms Failed\r\n        Input: <688>\r\n        Expected: <5>\r\n        Received: <0>\r\n    Case 3 ... 1ms Passed\r\n    Case 4 ... 1ms Failed\r\n        Input: <456>\r\n        Expected: <2>\r\n        Received: <0>\r\n    Case 5 ... 1ms Failed\r\n        Input: <789>\r\n        Expected: <3>\r\n        Received: <0>\r\n    [gettc] Summary\r\n    6 cases checked, 5 failures, 0 errors\r\n    Failures: 0, 1, 2, 4, 5\r\n        Total time taken: 7 ms\r\n        Average time taken: 1 ms\r\n        Slowest running case: 2 ms (case 0)\r\n\r\nAs you can see, the generated solution actually managed to solve 1 test case.\r\nGettc is pretty smart after all. Anyway, you still need to do the hard work.\r\nOpen the file `DigitHoles.cpp` in your favourite editor and enter the following\r\ncontent:\r\n\r\n    class DigitHoles {\r\n    public:\r\n        int numHoles(int number) {\r\n            static int holes[] = {1, 0, 0, 0, 1, 0, 1, 0, 2, 1};\r\n            int ret = 0;\r\n            while (number > 0) {\r\n                ret += holes[number % 10];\r\n                number /= 10;\r\n            }\r\n            return ret;\r\n        }\r\n    };\r\n\r\nAnd then try again:\r\n\r\n    $ make demo\r\n\r\nYou should see:\r\n\r\n    [gettc] Compile solver\r\n    [gettc] Compile checker\r\n    [gettc] Run test cases\r\n    Case 0 ... 2ms Passed\r\n    Case 1 ... 1ms Passed\r\n    Case 2 ... 1ms Passed\r\n    Case 3 ... 1ms Passed\r\n    Case 4 ... 1ms Passed\r\n    Case 5 ... 2ms Passed\r\n    [gettc] Summary\r\n    6 cases checked, 0 failures, 0 errors\r\n        Total time taken: 8 ms\r\n        Average time taken: 1 ms\r\n        Slowest running case: 2 ms (case 0)\r\n\r\nGood. We have passed all the example tests. Why not challenge the system tests\r\nwhile we are it?\r\n\r\n    $ make sys\r\n\r\nOutput:\r\n\r\n    [gettc] Compile solver\r\n    [gettc] Compile checker\r\n    [gettc] Run test cases\r\n    [gettc] Summary\r\n    131 cases checked, 0 failures, 0 errors\r\n        Total time taken: 233 ms\r\n        Average time taken: 1 ms\r\n        Slowest running case: 7 ms (case 2)\r\n\r\nCongratulations! You have solved a TopCoder problem like a boss!\r\n\r\n# Installation\r\n\r\nGettc works on most operating systems, including Linux, Windows, and Mac OS.\r\n\r\nThe following packages are hard dependencies:\r\n\r\n- [Ruby](http://www.ruby-lang.org/en/downloads/): The\r\n[Ruby installer](http://rubyinstaller.org/) is recommend for Windows users.\r\n- [RubyGems](http://rubygems.org/pages/download): Many Ruby installations\r\nalready bundle RubyGems.\r\n- The standard GCC toolset: Specifically, you should be able to run g++ and make\r\nfrom the command line. Windows users may use [MinGW](http://www.mingw.org) or\r\nCygwin.\r\n\r\n> If you have problems installing on Windows, this may help:\r\n> https://www.quora.com/How-do-I-install-gettc-for-downloading-TopCoder-problems/answer/Rajneesh-Chauhan\r\n\r\nWith those in place, we are aready to go:\r\n\r\n    $ [sudo] gem install gettc\r\n\r\nOnce that is done, you should be able to run gettc on the command line. The\r\nstandard procedure is:\r\n\r\n    $ gettc problem_id\r\n    $ cd ProblemName/solve/your_language\r\n    $ make\r\n\r\nNow there are a couple things you need to get depending on your desired language.\r\n\r\n- For C++: You are already ready to solve problems [using C++](https://github.com/seri/gettc/blob/master/plugins/cpp/README.md).\r\n- For Haskell: [Come here](https://github.com/seri/gettc/blob/master/plugins/haskell/README.md)\r\n- For Java: [Come here](https://github.com/seri/gettc/blob/master/plugins/java/README.md)\r\n- For Python: [Come here](https://github.com/seri/gettc/blob/master/plugins/python/README.md)\r\n- For Go: [Come here](https://github.com/seri/gettc/blob/master/plugins/go/README.md)\r\n- For Ruby: [Come here](https://github.com/seri/gettc/blob/master/plugins/ruby/README.md)\r\n- For Javascript: [Come here](https://github.com/seri/gettc/blob/master/plugins/javascript/README.md)\r\n\r\n# Known issues\r\n\r\n- I remember having encountered a problem where gettc failed to download the system\r\ntests while it is in fact possible to get the system tests. However, I forgot the\r\nproblem ID. If you meet such problems, please file an issue so I can fix this.\r\n- There are a few problems that allow multiple answers (such as\r\n[CorruptedMessage](http://community.topcoder.com/stat?c=problem_statement&pm=13748&rd=16416)).\r\nGettc cannot deal with this because it can only extract the single answer that\r\nTopCoder shows. If you meet such problems, a good guess is to always return the\r\nsmallest possible value.\r\n\r\n# Tips\r\n\r\n- It's good practice to provide your own username/password in `~/.gettc/config.yml`.\r\n- You may `rm -rf build` after you're done solving to save some disk space.\r\n- You can play with the contents of the directory `~/.gettc` to, say, remove things\r\nyou don't want to be generated. If you mess up, run `gettc reset`.\r\n- You can bring the solutions generated by gettc to another computer to run.\r\nSuch system doesn't need to have gettc, or even ruby, but it will need the\r\nstandard gcc toolchain, and of course the compiler for your desired language\r\n(if it isn't C++). You will also need to copy `~/.gettc` to that system.\r\n\r\n> This document is for new users. Existing users can find details about updating by\r\n> reading the [change log](https://github.com/seri/gettc/blob/master/CHANGELOG.md).\r\n","google":"UA-42226633-1","note":"Don't delete this file! It's used internally to help with page regeneration."}